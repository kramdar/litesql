/* LiteSQL - Documentation - Main Page
 * 
 * By Tero Laitinen 
 * 
 * See LICENSE for copyright information. */
/* \file main.txt
    Manual */
/** \mainpage LiteSQL - C++ Object-Relational Persistence Framework
\htmlonly
<center> 
<a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=litesql&type=1" width="88" height="31" border="0" alt="SourceForge.net Logo" />
</a></center>
\endhtmlonly
\section intro Introduction

LiteSQL is a C++ library that integrates C++ objects tightly to relational
database and thus provides an object persistence layer. LiteSQL supports
SQLite3, PostgreSQL and MySQL as backends. LiteSQL creates tables, 
indexes and sequences to database and upgrades schema when needed. 

In addition to object persistence, LiteSQL provides object relations which
can be used to model any kind of C++ data structures. Objects can be selected,
filtered and ordered using template- and class-based API which are type 
checked at compile time.
 
\section features Features

- SQLite3, PostgreSQL and MySQL - backend support
- object persistence layer with relation support
- automatic database schema creation and upgrading
- small code base: less than 2500 lines of C++
- create complex SQL queries using compile time checked class API; minimizes need to write SQL query strings

\section status Status

- this a testing release

\section requirements Requirements

- gcc-compatible C++ compiler that supports member templates
- client library and header files for at least one backend: libsqlite3, libmysqlclient or libpq
- scons build tool
- Python 2.3 (Python 2.2 should work too): database definition file parser is 
  written in Python

\section license License

This library is distributed under the terms of \ref bsdlicense

\section helpneeded Help Needed

All feedback concerning the library is welcome. 
If you want to advance the development of the library, you may contribute by:
- using the library in your projects 
- submitting bug reports or feature requests
- implementing new a feature (ask first if somebody is already working on it)
- testing if the library compiles and runs on your system
- making the library compile and run on your system
- writing usage examples 
\section support Support

Subscribe to <a class="el" href="http://lists.sourceforge.net/lists/listinfo/litesql-users">litesql-users mailing list</a> and describe your problems or
ideas there. 

\section manual Manual

\subsection toc Table of Contents
 - \ref implementation
 - \ref changes
 - \ref future
 - \ref usage_defining_database
 - \ref usage_database_create_drop
 - \ref usage_update_delete_persistents
 - \ref usage_selecting_persistents
 - \ref usage_using_relations
 - \ref usage_upcasting
 - \ref usage_cursor
 - \ref usage_using_database
 - \ref mysql_notes
 - \ref cost

\subsection exlinks External Links
 - <a class="el" href="http://sourceforge.net/project/showfiles.php?group_id=113304">Download</a>
 - <a class="el" href="http://sourceforge.net/tracker/?group_id=113304&atid=664757">Bug Tracker</a>
 - <a class="el" href="http://sourceforge.net/forum/?group_id=113304">Forum</a>
 - <a class="el" href="http://sourceforge.net/projects/litesql">Project Page</a>


\section quickstart Quick Start

\subsection quickstart1 Step 1: Write XML-file which defines objects, fields, methods and relations in database.

Simple example database definition file exampledatabase.xml:
\include exampledatabase.xml

\subsection quickstart2 Step 2: Run Code Generator
\code
litesql-gen exampledatabase.xml
\endcode
Files exampledatabase.cpp and exampledatabase.hpp are written.

\subsection quickstart3 Step 3: Write Application Code
\include example.cpp

\subsection quickstart4 Step 4: Compile, Link and Execute
When executed, the example program will output following:
\include example_output.txt
Following SQL queries are executed under the hood. Most of the queries
are related to creating database schema and storing it to schema-table.
\include example_queries.txt
<hr>
By Tero Laitinen <tero.laitinen@iki.fi>
*/
