<!DOCTYPE actions SYSTEM "flexml-act.dtd">
<actions>
<top><![CDATA[
#include "cppgenerator.hpp"
#include "xmlobjects.hpp"
#include "litesql-gen-cpp.hpp"
#include "litesql-gen.hpp"
using namespace std;
using namespace gen;
FILE *hpp, *cpp;
vector<xml::Object> objects;
vector<xml::Relation> relations;
xml::Object * obj;
xml::Relation * rel;
xml::Field * fld;
xml::Method * mtd;
bool hasNamespace;
string dbName;
]]></top>
<start tag="database"><![CDATA[
dbName = {name};
string hppName = toLower({name}) + ".hpp";
hpp = fopen(hppName.c_str(), "w");
string cppName = toLower({name}) + ".cpp";
cpp = fopen(cppName.c_str(), "w");
fprintf(hpp, "#include \"litesql.hpp\"\n");
if ({include}) 
    fprintf(hpp, "#include \"%s\"\n", {include});
fprintf(cpp, "#include \"%s\"\n", hppName.c_str());
if ({namespace}) {
    fprintf(hpp, "namespace %s {\n", {namespace});
    fprintf(cpp, "namespace %s {\n", {namespace});
    hasNamespace = true;
} else
    hasNamespace = false;
fprintf(cpp, "using namespace litesql;\n");
]]></start>
<start tag="object"><![CDATA[
objects.push_back(xml::Object({name}, xml::safe({inherits})));
obj = &objects[objects.size()-1];
]]></start>
<end tag="object"><![CDATA[
obj = NULL;
]]></end>
<start tag="relation"><![CDATA[
relations.push_back(xml::Relation(xml::safe({id}), xml::safe({name}),{unidir}));
rel = &relations[relations.size()-1];
]]></start>
<end tag="relation"><![CDATA[
rel = NULL;
]]></end>
<start tag="field"><![CDATA[
if (obj) {
    obj->fields.push_back(xml::Field({name}, 
                                     {type},xml::safe({default}),{indexed}));
    fld = &obj->fields[obj->fields.size()-1];
} else if (rel) {
    rel->fields.push_back(xml::Field({name}, 
                         {type},xml::safe({default}),{indexed}));
    fld = &rel->fields[rel->fields.size()-1];
}
]]></start>
<start tag="value"><![CDATA[
if (fld) 
    fld->value(xml::Value({name}, {value}));
]]></start>
<end tag="field"><![CDATA[
fld = NULL;
]]></end>
<start tag="method"><![CDATA[
if (obj) {
    obj->methods.push_back(xml::Method({name}, xml::safe({returntype})));
    mtd = &obj->methods[obj->methods.size()-1];
}
]]></start>
<end tag="method"><![CDATA[
mtd = NULL;
]]></end>
<start tag="param"><![CDATA[
if (mtd) 
    mtd->param(xml::Param({name}, {type}));
]]></start>
<start tag="relate"><![CDATA[
if (rel)
    rel->related.push_back(xml::Relate({object}, {limit}, {unique}, xml::safe({handle})));
]]></start>
<end tag="database"><![CDATA[
try {
    writeCPPClasses(hpp, cpp, dbName, objects, relations);
} catch (logic_error& e) {
    cerr << e.what() << endl;       
}
if (hasNamespace) {
    fprintf(hpp, "}\n");
    fprintf(cpp, "}\n");
}
fclose(hpp);
fclose(cpp);
]]></end>
<main><![CDATA[
extern FILE * yyin;
int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "usage: litesql-gen <my-database.xml>\n");
        return -1;
    }
    yyin = fopen(argv[1], "r");
    if (!yyin) {
        perror("could not open file: ");
        return -1;
    }
    
    return yylex();
}
]]></main>
</actions>
