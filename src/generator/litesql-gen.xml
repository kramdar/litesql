<!DOCTYPE actions SYSTEM "flexml-act.dtd">
<actions>
<top><![CDATA[
#include "xmlobjects.hpp"
#include "litesql-gen-main.hpp"
#include "litesql-gen.hpp"
#include "scanner.hpp"
#include <list>
using namespace std;
using namespace xml;
extern FILE* yyin;
list<Position> posStack;
string currentFile;
Database* db;
Object * obj;
Relation * rel;
Field * fld;
Type* type;
Method * mtd;
Index * idx;
Option* option;
IfBackend* ifBackend;
IfTarget* ifTarget;
Relate* relate;

Position getPosition() {
    return Position(currentFile, yylineno);
}

]]></top>
<start tag="database"><![CDATA[
db = new Database(getPosition());
db->name = safe({name});
db->include = safe({include});
db->nspace = safe({namespace});
initBaseTypes(*db);
]]></start>
<start tag="object"><![CDATA[
db->objects.push_back(obj = new Object(getPosition(), {name}, safe({inherits}), {temporary}));
]]></start>
<end tag="object"><![CDATA[
obj = NULL;
]]></end>
<start tag="relation"><![CDATA[
db->relations.push_back(rel = new Relation(getPosition(), safe({id}), safe({name}),{unidir}));
]]></start>
<end tag="relation"><![CDATA[
rel = NULL;
]]></end>
<start tag="option"><![CDATA[
option = new Option(getPosition(), {name}, {value});
if (ifBackend)
    ifBackend->options.push_back(option);
else if (ifTarget)
    ifTarget->options.push_back(option);
else if (obj)
    obj->options.push_back(option);
else if (rel)
    rel->options.push_back(option);
else
    db->options.push_back(option);    
]]></start>
<start tag="if-backend"><![CDATA[
ifBackend = new IfBackend(getPosition(), {name});
if (obj)
    obj->ifBackends.push_back(ifBackend);
else if (rel)
    rel->ifBackends.push_back(ifBackend);
else
    db->ifBackends.push_back(ifBackend);

]]></start>
<end tag="if-backend"><![CDATA[
ifBackend = NULL;
]]></end>
<start tag="if-target"><![CDATA[
ifTarget = new IfTarget(getPosition(), {name});
db->ifTargets.push_back(ifTarget);
]]></start>
<end tag="if-target"><![CDATA[
ifTarget = NULL;
]]></end>
<start tag="include"><![CDATA[
yyin = fopen({file}, "r");
if (!yyin) {
    fprintf(stderr, "Could not open file %s", {file});
    exit(-1);
}
posStack.push_front(getPosition());
currentFile = {file};
yylineno = 1;
yypush_buffer_state(yy_create_buffer(yyin, 16834));

]]></start>
<start tag="type"><![CDATA[
type = new Type(getPosition(), {name}, {class}, {sqltype});
if (ifBackend)
    ifBackend->types.push_back(type);
else if (ifTarget)
    ifTarget->types.push_back(type);
else
    db->types.push_back(type);
]]></start>
<end tag="type"><![CDATA[
type = NULL;
]]></end>
<start tag="field"><![CDATA[
if (obj) {
    obj->fields.push_back(fld =new Field(getPosition(), {name}, 
                                     {type},safe({default}),{indexed},{unique}));
} else if (rel) {
    rel->fields.push_back(fld = new Field(getPosition(), {name}, 
                         {type},safe({default}),{indexed}, {unique}));
}
]]></start>
<start tag="index"><![CDATA[
idx = new Index(getPosition(), {unique});
if (obj) 
    obj->indices.push_back(idx);
else if (rel) 
    rel->indices.push_back(idx);
]]></start>
<end tag="index"><![CDATA[
idx = NULL;
]]></end>
<start tag="indexfield"><![CDATA[
if (idx)
    idx->fields.push_back(IndexField(getPosition(), {name}));
]]></start>
<start tag="value"><![CDATA[
if (fld) 
    fld->value(Value(getPosition(), {name}, {value}));
else if (type)
    type->values.push_back(Value(getPosition(), {name}, {value}));
]]></start>
<end tag="field"><![CDATA[
fld = NULL;
]]></end>
<start tag="method"><![CDATA[
if (obj) {
    obj->methods.push_back(mtd = new Method(getPosition(), {name}, safe({returntype}), {const}));
}
]]></start>
<end tag="method"><![CDATA[
mtd = NULL;
]]></end>
<start tag="param"><![CDATA[
if (mtd) 
    mtd->param(Param(getPosition(), {name}, {type}));
]]></start>
<start tag="relate"><![CDATA[
relate = new Relate(getPosition(), {object}, {limit}, {unique}, safe({handle}), safe({remotehandle}));
if (rel)
    rel->related.push_back(relate);
else if (obj)
    obj->related.push_back(relate);
]]></start>
<end tag="database"><![CDATA[
    generateCode(*db);    
]]></end>
<main><![CDATA[
extern FILE * yyin;
int main(int argc, char **argv) {
    return litesql_gen_main(argc, argv, &yyin);
}
]]></main>
</actions>
