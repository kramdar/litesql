#line 2 "scanner.cpp"

#line 4 "scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 263
#define YY_END_OF_BUFFER 264
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2078] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  264,  262,   29,   10,
       10,   29,   29,  242,   10,  242,    5,    6,    5,    8,
        9,    8,  258,  250,  251,  259,  256,  259,  257,  261,
      250,  251,  261,  262,   39,   10,   39,   39,   39,   37,

       39,   39,  262,   43,   10,   43,   43,  262,   55,   10,
       55,   55,   55,   53,   55,   55,   55,   59,   10,   59,
      262,   59,  262,   69,   10,   69,   69,   69,   67,   69,
       69,   69,   73,   10,   73,  262,   73,  262,   79,   10,
       79,   79,   79,   77,   79,   83,   10,   83,  262,   89,
       10,   89,   89,   89,   87,   89,   93,   10,   93,  262,
       93,  262,   99,   10,   99,   99,   99,   97,   99,  103,
       10,  103,  103,  262,  111,   10,  111,  111,  111,  109,
      111,  111,  115,   10,  115,  262,  133,   10,  133,  133,
      133,  131,  133,  133,  133,  133,  133,  137,   10,  137,

      137,  262,  145,   10,  145,  145,  145,  143,  145,  262,
      149,   10,  149,  149,  155,   10,  155,  155,  155,  153,
      155,  159,   10,  159,  167,   10,  167,  167,  167,  165,
      167,  167,  171,   10,  171,  262,  183,   10,  183,  183,
      183,  181,  183,  183,  183,  187,   10,  187,  262,  187,
      195,   10,  195,  195,  195,  193,  195,  195,  199,   10,
      199,  262,  211,   10,  211,  211,  211,  209,  211,  211,
      211,  215,   10,  215,  262,  215,  262,  237,   10,  237,
      237,  237,  235,  237,  237,  237,  237,  237,  241,   10,
      241,  259,  258,   10,    0,    2,    2,    0,    4,    7,

      253,  252,    0,    0,    0,    0,    0,    0,    0,   38,
       40,   40,   40,    0,    0,    0,    0,    0,    0,   54,
       56,   56,   56,   56,    0,    0,    0,    0,    0,    0,
       68,   70,   70,   70,   70,    0,    0,    0,   78,   80,
       80,    0,    0,   88,   90,   90,    0,    0,   98,  100,
      100,    0,  110,  112,  112,  112,    0,  132,  134,  134,
      134,  134,  134,  134,    0,    0,  144,  146,  146,    0,
        0,  154,  156,  156,    0,  166,  168,  168,  168,    0,
      182,  184,  184,  184,  184,    0,    0,  194,  196,  196,
      196,    0,  210,  212,  212,  212,  212,    0,  236,  238,

      238,  238,  238,  238,  238,  238,    0,    0,    0,    0,
        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,  260,    0,   40,   40,    0,    0,    0,    0,    0,
        0,    0,    0,   56,   56,   56,    0,    0,    0,    0,
        0,    0,    0,   70,   70,   70,    0,    0,    0,   80,
        0,    0,   90,    0,    0,    0,  100,    0,    0,  112,
      112,    0,    0,  134,  134,  134,  134,  134,    0,    0,
      146,    0,    0,    0,  156,    0,    0,  168,  168,    0,
        0,  184,  184,  184,    0,    0,    0,  196,  196,    0,
        0,    0,    0,  212,  212,    0,    0,  238,  238,  238,

      238,  238,  238,    0,    0,    0,  255,    0,   28,    1,
        0,    0,  248,    0,    0,    0,  245,  244,    0,    0,
       40,   40,    0,    0,    0,    0,    0,    0,    0,    0,
       42,    0,   56,   56,   56,    0,    0,   58,    0,    0,
        0,    0,    0,    0,   70,   70,   70,    0,    0,   72,
        0,    0,   80,    0,    0,   82,    0,   90,    0,    0,
       92,    0,    0,  100,    0,    0,  102,    0,  112,  112,
        0,    0,  114,    0,  134,  134,  134,  134,  134,    0,
        0,  136,    0,  146,    0,    0,    0,  148,    0,  156,
        0,    0,  158,    0,  168,  168,    0,    0,  170,    0,

      184,  184,  184,    0,    0,  186,    0,    0,  196,  196,
        0,    0,  198,    0,    0,    0,    0,  212,  212,    0,
        0,  214,    0,  238,  238,  238,  238,  238,  238,    0,
        0,  240,    0,    0,    0,    0,  249,  243,    0,    0,
        0,   40,    0,    0,   40,    0,    0,    0,    0,    0,
        0,   60,    0,   56,    0,    0,   56,    0,    0,    0,
        0,    0,   70,    0,    0,   70,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
        0,  134,  134,    0,    0,    0,    0,  134,    0,  146,
        0,    0,    0,    0,    0,    0,    0,  168,    0,  184,

        0,    0,  184,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  212,    0,  238,  238,  238,  238,
      238,  238,    0,    0,    0,    0,    0,   12,    0,  246,
      247,    0,   40,    0,    0,    0,   40,    0,    0,    0,
        0,    0,    0,   60,    0,   56,    0,    0,    0,   56,
        0,  116,  138,    0,    0,    0,    0,    0,    0,    0,
       70,    0,  160,    0,   76,   75,    0,    0,   86,   85,
        0,    0,   96,   95,    0,    0,  106,  105,    0,    0,
        0,  134,  134,    0,    0,    0,    0,    0,    0,  134,
        0,  146,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  184,
        0,  188,    0,    0,    0,    0,  192,  191,    0,  204,
      203,    0,    0,    0,  212,    0,  238,    0,    0,  238,
        0,    0,  238,  238,    0,    0,    0,    0,    0,   11,
        0,   40,    0,    0,   40,    0,    0,    0,   44,  104,
        0,    0,   56,    0,    0,   56,    0,  116,  138,  172,
      216,    0,   64,   63,    0,    0,   70,    0,   71,  160,
        0,    0,    0,    0,  108,  107,    0,  134,  134,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  164,  163,    0,    0,

        0,    0,    0,    0,  184,    0,  188,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  238,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   32,    0,   31,    0,
       40,    0,    0,   74,   44,  104,    0,    0,   56,   50,
        0,   49,    0,   56,    0,  172,  216,   62,   61,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  118,
      117,  120,  119,    0,    0,    0,    0,  135,    0,    0,
        0,    0,    0,  147,  152,  151,    0,  162,  161,    0,
      169,    0,    0,    0,    0,  174,  173,  184,    0,  190,

      189,    0,  197,  202,  201,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  238,    0,    0,    0,    0,    0,    0,
        0,    0,   30,    0,   36,   35,   40,    0,    0,   74,
      200,    0,    0,    0,   56,    0,   57,    0,   66,   65,
        0,    0,    0,    0,  113,    0,  122,  121,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  184,    0,  185,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  238,    0,    0,    0,    0,

        0,  239,  254,    0,    0,    0,   30,    0,    0,    0,
       94,  200,    0,    0,    0,    0,    0,    0,    0,   81,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      184,    0,    0,    0,    0,    0,  232,  231,    0,    0,
        0,    0,  230,    0,  229,    0,    0,    0,    0,    0,
      238,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   84,
       94,    0,   41,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  150,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  213,    0,  222,    0,  221,
        0,    0,    0,    0,  238,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   84,   52,   51,    0,    0,    0,
        0,    0,    0,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  150,    0,    0,  176,
        0,  175,    0,  180,  179,    0,    0,    0,    0,  224,
      223,    0,  226,    0,  225,  238,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   34,   33,    0,    0,    0,    0,
        0,   91,    0,    0,    0,    0,    0,  128,    0,  127,
        0,  140,    0,  139,    0,  157,  178,  177,    0,  206,
        0,  205,  228,  227,    0,    0,    0,  218,    0,  217,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  124,    0,  123,  130,  129,  142,  141,  208,  207,
        0,    0,    0,  220,  219,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  126,  125,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   46,    0,   45,  234,  233,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,    0,   12,    0,   48,   47,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   24,    0,    0,    0,    0,   27,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,    0,    0,    0,   26,    0,    0,    0,    0,   17,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       22,    0,   14,    0,   25,    0,   16,    0,    0,    0,
        0,    0,    0,    0,    0,   18,    0,    0,    0,    0,
       19,    0,    0,    0,    0,    0,    0,   21,    0,    0,
       15,    0,    0,   13,    0,   23,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    8,    9,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   21,
       14,   14,   14,   14,   14,   14,   25,   14,   26,   27,
       14,   14,   28,   29,   14,   14,   14,   14,   30,   14,
       31,    1,   32,    1,   14,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   14,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[58] =
    {   0,
        1,    2,    2,    2,    1,    3,    1,    1,    4,    5,
        5,    1,    6,    7,    1,    1,    8,    9,    1,   10,
       10,   10,   10,   10,    7,    7,    7,    7,    7,    7,
        1,    1,   10,   10,   10,   10,   10,   10,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[2267] =
    {   0,
        0,    0,    0,    3,    6,    9,   24,   27,   11,   14,
       15,   17,   29,   38,   45,   52,   59,   61,   67,   70,
       93,  139,   73,   76,  111,  114,  117,  157,  160,  163,
      179,  184,  200,    0,  256,  259,  262,  265,  280,  283,
      286,  289,  304,  307,  323,    0,  379,  382,  385,  388,
      403,  406,  409,  412,  427,  430,  446,  484,  464,  467,
      502,  505,  522,  568,  540,  543,  546,  586,  589,  592,
      607,  613,  616,  622,  638,  684,  656,  659,  662,  702,
      705,  708,  723,  729,  732,  738,  754,  808,  772,  775,
      778,  826,  862,    0,  829,  832,  918,  921,  924,  927,

      942,  945,  948,  951,  967, 1020,  985,  988,  991, 1038,
     1041, 1044, 1059, 1062, 1065, 1068, 1083, 1086, 1102, 1148,
     1120, 1123, 1126, 1166, 1194, 1248, 1169, 1172, 1212, 1215,
     1302,    0, 1218, 1266, 1269, 1272, 1358, 1361, 1364, 1367,
     1382, 1385, 1401, 1453, 1419, 1422, 1425, 1471, 1505,    0,
     1474, 1477, 1561, 1564, 1567, 1570, 1585, 1588, 1591, 1594,
     1610,    0, 1666, 1669, 1002, 1671, 6358, 6359, 6359,  133,
      187,   47,   62, 6359,  190,  179, 6359, 6359, 6347, 6359,
     6359, 6338, 6359, 6351, 6351, 1669, 6359, 6359, 6359, 6359,
     6349, 6349, 6319,  546, 6359,  310, 6332,    0,  275, 6359,

     6303, 6315, 1673, 6359,  313, 1681,  616,  398, 6359,  433,
     6329,    0,  299, 6359, 6300, 6312, 6246, 6359,  436, 1700,
     1710,  662,  422, 6359,  508, 6264,    0,  547, 6359, 6233,
     6243, 6222, 6359,  747,  784,  617,  778,  593, 6359,  802,
     6252,    0,  608, 6359, 6224, 6359,  847,  841, 1075, 6359,
      853, 6246,    0,  663, 6359, 6226, 6359, 1009, 1685, 1702,
      997, 1374, 6359, 1089, 6240,    0,  709, 6359, 6220, 6359,
     1093, 1734, 1126, 1679, 6359, 1187, 6234,    0,  718, 6359,
     6214, 6213, 6359, 1233, 1227, 1224, 6359, 1287, 6222,    0,
      724, 6359, 6202, 6189, 6199, 6174, 6182, 6359, 1293, 1432,

     1281, 1426, 6359, 1388, 6209,    0,  733, 6359, 6178, 1675,
     6359, 1392, 1676, 1431, 6359, 1492, 6205,    0,  779, 6359,
     6185, 6359, 1498, 1747, 6359, 1707, 6199,    0,  782, 6359,
     6178, 6174, 6359, 1732, 1751, 1739, 6359, 1765, 6188,    0,
      788, 6359, 6155, 6165, 6160, 6359, 1769, 1770, 1757, 1773,
     6359, 1791, 6175,    0,  839, 6359, 6156, 6131, 6359, 1794,
     1794, 1127, 6359, 1798, 6166,    0,  842, 6359, 6144, 6146,
     6129, 6359, 1805, 1798, 1785, 1809, 1173, 6359, 1827, 6153,
        0,  937, 6359, 6137, 6126,   73, 6129, 6114, 6359, 1838,
     1815, 6154, 6123, 1847,   34, 6096, 6359, 6137, 6128, 6359,

     6359, 6359,   26,   39, 6090, 6086, 6084, 6116, 6100, 6359,
        0, 6093, 6082,   85,  966, 6084, 6063, 6080, 6058, 6359,
        0, 6048, 6042, 6039, 6036, 6036,  131, 6036, 6024, 6032,
     6359,    0, 6035, 6017, 6017, 6005, 6020, 6003, 6359,    0,
     6004, 6004, 6006, 6359,    0, 5993, 5996, 5995, 6359,    0,
     5984, 5984, 6359,    0, 5979, 5977, 5973, 6359,    0, 5977,
     5978, 5963, 5959, 5962, 5961, 5949, 6359,    0, 5953, 5945,
     5949, 6359,    0, 5939, 5942, 6359,    0, 5934, 5931, 5917,
     6359,    0, 5924, 5922, 5914, 5915, 5926, 6359,    0, 5910,
     5903, 5899, 6359,    0, 1850, 5901, 5901, 5888, 6359,    0,

     5891, 5889, 5891, 5881, 5881, 5881, 5869, 5887, 5894, 5893,
     5897,  253, 5859, 6359,   75,    0, 5851, 5851, 5879, 5875,
     5842, 6359, 5833, 5837, 5843, 5866, 5837, 5829, 5815, 5819,
     5814, 1853, 1856, 5822, 5817, 5805, 1859, 1862, 5813, 5839,
     5807, 5790, 5794, 5783, 5793, 5777, 1866, 1879, 5782, 5788,
     1883, 1888, 5782, 1891, 1900, 5808, 5777, 1896, 1908, 5774,
     5757, 1913, 1917, 5771, 5763, 5762, 5759, 5746, 1921, 1925,
     5740, 5752, 1938, 1945, 5747, 1949, 1955, 5744, 5723, 1958,
     1966, 5724, 5714, 5694, 1975, 1978, 5696, 5706, 5701, 1984,
     2001, 2004, 2007, 5700, 5697, 2020, 2023, 5693, 5687, 5688,

     5683, 5672, 5667, 2026, 2029, 5693, 6359, 5692, 6359, 6359,
      104, 5665, 6359, 5688, 5684, 5647, 6359, 6359, 5643, 5661,
     5636, 2033,  144, 5644, 5645, 5637, 5644, 5637, 2049, 2052,
     6359, 2055, 5623, 2059, 5621, 2075, 2078, 6359, 2083, 5623,
     5628, 5624, 5615, 5618, 5599, 2086, 5590, 2095, 2102, 6359,
     2106, 5593, 2112, 2115, 2119, 6359, 2124, 2128, 2132, 2137,
     6359, 2154, 5589, 2144, 2149, 2166, 6359, 2171, 2174, 5603,
     2183, 2190, 6359, 2193, 5581, 5574, 2196, 2200, 5576, 2203,
     2212, 6359, 2216, 5573, 5588, 2220, 2223, 6359, 2229, 2233,
     2240, 2252, 6359, 2257, 2260, 5583, 2264, 2269, 6359, 2276,

     5567, 2281, 5563, 2286, 2293, 6359, 2297, 5576, 2304, 2310,
     2314, 2320, 6359, 2326, 2331,    0,    0, 2339, 5567, 2343,
     2348, 6359, 2351, 5561, 5548, 5564, 5545, 5539, 5537, 2355,
     2360, 6359, 2368, 5564,  823, 2378, 6359, 6359, 5571, 5566,
     5546, 5539, 2381, 2385, 5526, 5536, 5535, 5510, 5527, 5510,
     5504, 2397, 2400, 5510, 2403, 2407, 5500, 2419, 5511, 5490,
     5496, 5490, 2422, 2425, 2432, 5491, 2428, 5501, 2441, 2445,
     2457, 2460, 2464, 2476, 2479, 2482, 2495, 2500, 2503, 2512,
     2516, 5481, 5487, 2519, 2522, 2535, 2539, 5482, 2547, 5481,
     5456, 2551, 2556, 2568, 2560, 2564, 2580, 2590, 2596, 2599,

     2602, 2606, 5462, 2618, 5462, 2621, 2624, 2637, 2641, 2649,
     5497, 5490, 2653, 2657, 5448, 2669, 5457, 2672, 5438, 2675,
     5452, 5448, 2681, 5461,    5, 5462, 2691, 6359, 5458, 6359,
     6359, 5439, 5434, 2694,    0,    0, 5434, 5428, 5412, 5422,
     5402, 5407, 5408, 2702, 2708, 5393, 2713,    0,    0, 5411,
     2721, 2727, 2730, 5404, 5399, 2733, 2745, 2755,    0,    0,
     5398, 2763, 2766, 2769, 6359, 6359, 2780, 2783, 6359, 6359,
     2791, 2797, 6359, 6359, 2808, 2811, 6359, 6359, 2819, 2825,
     2835, 5379, 5391, 2840,    0,    0, 2848,    0,    0, 2856,
     2859, 2862, 5388, 2865, 2872,    0,    0, 2868, 2885,    0,

        0, 2894, 2897, 2905, 2910, 2913, 2926,    0,    0, 5370,
     2934, 2937, 2941,    0,    0, 2951, 6359, 6359, 2959, 6359,
     6359, 2962,    0,    0, 2970, 2976, 2980, 2986, 2989, 2997,
     3003, 3006, 3014, 3019, 3022, 5389,   32,  252,  135, 6359,
     5366, 3030, 5407, 5400, 3035, 5365, 5365, 5363, 3039, 3042,
     5352, 3046, 5344, 5385, 5381, 5336, 3053, 3056, 3059, 3063,
     3073, 3078, 6359, 6359, 5376, 5372, 3086, 3089, 6359, 3092,
     3095, 3098, 3106, 3116, 6359, 6359, 3124, 3132, 3135, 5372,
     5368, 5370, 5354, 3141, 3144, 3157, 3160, 3163, 5321, 3176,
     5353, 5349, 3179, 5349, 5345, 3182, 6359, 6359, 3196, 3199,

      965, 1186, 5345, 5341, 5290, 3207, 3216, 5340, 5334, 3219,
     5336, 5330, 3224, 3227, 3236, 3242, 3246, 3254,  152,  229,
     3262, 3265, 3278, 1189, 1192, 5305, 3286, 3289, 3297, 5315,
      114,  463,  376, 5297, 3302, 3305, 6359, 5325, 6359, 5321,
     5290, 5289, 5286, 3314, 3318, 3321, 5276, 3324, 3327, 6359,
     5313, 6359, 5309, 3333, 3336, 3343, 3349, 6359, 6359, 3353,
     3356, 3364, 3369, 3374, 3377, 3381, 3400, 3412, 3415, 6359,
     6359, 6359, 6359, 3424, 1195, 1240, 3432, 6359, 3435, 1246,
     1249, 5278, 3443, 6359, 6359, 6359, 3449, 6359, 6359, 3452,
     6359, 5281, 5261, 5277, 5257, 6359, 6359, 5258, 3455, 6359,

     6359, 3460, 6359, 6359, 6359, 3473, 1396, 1445, 3481, 3485,
        0,    0, 5270, 5247, 5259, 5241, 3494,    0,    0, 5253,
     5231, 5247, 5225, 5228, 3502, 1451, 1547, 3511, 5238, 3514,
      426,  424, 3517, 3521, 6359, 6359, 3531, 5222, 5211, 3534,
     3537, 3540, 3543, 3547, 3559, 3562, 6359, 3565, 6359, 6359,
     3579, 3582, 3585, 3588, 6359, 3592, 6359, 6359, 3605, 1639,
     1727, 5229, 5207, 5223, 5201, 5217, 5195, 5211, 5189, 5194,
     3613, 5189, 5179, 5183, 5173, 5184, 3621, 6359, 5187, 5165,
     5181, 5159, 3624, 5202, 4874, 4836, 4844, 4834, 4841, 4871,
     4866, 4830, 4820, 4828, 4813, 4822, 4816, 4798, 4813, 4742,

     3630, 6359, 6359, 3669,  259,  379, 3633, 3641, 3650, 4755,
     3658, 3661, 3664, 3672,    0,    0, 3681, 3686, 3697, 6359,
     3700, 3709, 4748, 4721, 4696, 4320, 4310, 4285, 4258, 4243,
     4244, 4194, 4187, 4154, 4165, 3722, 4113, 4098, 4081, 4057,
     3726, 4045, 4035, 4007, 3993, 3729, 6359, 6359, 3979, 3987,
     3931, 3978, 6359, 3929, 6359, 3910, 3816, 3786, 3768, 3762,
     3664, 3649, 3587, 3534, 3456,  619,  382, 1773,  282, 1937,
      665,  285,  111,  735,  495,  583, 3732,    0,    0, 3746,
     3749, 3752, 6359, 3489, 3471, 3756, 1736, 1786, 3765, 3769,
     3367, 3357, 3363, 3296, 3297, 3260, 3235, 3236, 3221, 3233,

     3156, 3131, 3772, 3775, 3036, 3066, 3031, 3042, 3778, 3782,
     2978, 2990, 2962, 2949, 3794, 6359, 2963, 6359, 2947, 6359,
     2911, 2904, 2865, 2871, 2819, 2797, 2771, 2737, 2631,  545,
      381,  923, 1041,  661,  255,  914,  464,  589,  699,  702,
      375,  378, 2625, 2567, 3800, 6359, 6359, 2499, 2405, 2420,
     2364, 3803, 3806, 6359, 2339, 2212, 2158, 2128, 2057, 2066,
     2008, 2011, 1913, 1931, 1871, 1864, 3811, 3814, 1816, 6359,
     1768, 6359, 3824, 6359, 6359, 1724, 1734, 1662, 1687, 6359,
     6359, 1677, 6359, 1597, 6359, 3832, 1544, 1485, 1339, 1366,
      804,  918,  963,  921,  442,  704,  920,  978, 1065, 1129,

     1037,  502, 1040, 3835, 6359, 6359, 1329, 1319, 1239, 1192,
     3838, 6359, 1149, 1178, 1146, 1135, 1135, 6359, 1131, 6359,
     1047, 6359, 1040, 6359, 3841, 6359, 6359, 6359, 1002, 6359,
      951, 6359, 6359, 6359, 3844, 3860,  953, 6359,  790, 6359,
      825, 1064, 1175, 1364, 1224,  501, 1558, 1671, 1561,  586,
     1083, 3868, 1363, 3871, 3874, 3878,   34,  137,  124,  264,
      315, 6359,  393, 6359, 6359, 6359, 6359, 6359, 6359, 6359,
     3891,    0,    0, 6359, 6359, 1709, 3899, 1798, 1762, 1263,
     3902, 1564, 1557,  917, 3905, 1746, 3908, 3911, 3928, 3935,
     3945, 3963, 3995,  435,  470,  480,  549, 6359, 6359,  554,

      552, 1431, 3955, 1560, 1360, 1706, 3958, 1889, 3987, 4013,
     4016, 4019, 4026, 1683, 1412, 4036, 4039, 1434, 1828, 4064,
     4096,  558, 6359,  558, 6359, 6359, 6359, 1807, 1474, 1895,
     1927, 4056, 1858, 1957, 4059, 4088, 4115, 1965, 4118, 1797,
      774, 1982, 2065,  658,  597, 1980,  597, 4121, 6359, 6359,
     4127, 1470, 1829, 1996, 4145, 1926, 1861, 2082, 2153, 2210,
     2021, 2221, 4148, 1904, 2046,  667,  661,  710, 4151, 4154,
     2073, 1566, 4157, 2239, 2120, 1954, 2047, 2162, 2258, 2263,
     2291, 4174, 1032, 2273,  777, 2318, 1119, 4177, 4181, 2347,
     1163, 4187, 2350, 2390, 2458, 1854, 2471, 2422, 1421, 2022,

     6359, 2349, 2285, 4194, 2439, 2515, 2562, 4211, 2142, 2164,
     2228, 2593, 2307, 2512, 4214, 2617, 2517, 4217, 2599, 2557,
     2572, 4222, 2616, 2644, 2663, 2683, 4234, 2695, 2619, 4239,
     4247, 2662, 4252, 2725, 2689, 2737, 4260, 2762, 4269, 4272,
     4277, 4280, 4289, 2703, 1974, 1999, 4297, 2779, 2024, 2051,
     2723, 2720, 4306, 2230, 2646, 2745, 4310, 4323, 4331, 2647,
     2758, 4341, 2800, 1956, 2374, 2761, 2801, 4318, 2454, 2538,
     2722, 2822, 4349, 2789, 2814, 2866, 2874, 2887, 2902, 2907,
     2915, 2931, 2978, 3012, 2958, 2967, 4358, 2287, 2308, 3065,
     3099, 4362, 2456, 2475, 3060, 4370, 3068, 3086, 2543, 3017,

     3096, 3114, 3133, 3155, 3171, 3172, 3174, 3105, 3224, 3175,
     3206, 4375, 2074, 2125, 3233, 3244, 3097, 3188, 2126, 2192,
     4383, 4388, 3292, 3323, 2356, 2453, 4396, 3260, 3345, 3356,
     3368, 3370, 3371, 2474, 2595, 3373, 3413, 3217, 3325, 2161,
     2399, 2759, 2798, 3425, 3430, 2875, 2916, 4401, 3424, 3442,
     3422, 3474, 3136, 3153, 4409, 2867, 3158, 3216, 3257, 3265,
     3295, 3343, 3381, 3475, 3536, 3431, 3534, 2742, 3561, 3451,
     3504, 3541, 3552, 3581, 3600, 3463, 3513, 3628, 3639, 3584,
     3659, 3602, 3637, 3594, 3676, 3554, 3688, 3691, 3739, 3771,
     3774, 3673, 3745, 3832, 3839, 3595, 3802, 3811, 3880, 3782,

     3850, 3727, 3842, 3898, 3988, 3909, 3915, 3833, 3900, 3904,
     3974, 3991, 4006, 3967, 4015, 3925, 4035, 4037, 4060, 4089,
     4092, 4031, 4124, 4116, 4144, 4149, 4169, 3382, 3726, 4126,
     4156, 4034, 4075, 3847, 3910, 4119, 4176, 4186, 4190, 4185,
     4228, 3966, 4242, 4192, 4215, 4241, 4250, 4279, 4286, 4287,
     4338, 4300, 4328, 4339, 4345, 4324, 4351, 3093, 3661, 4398,
     4406, 4299, 4377, 4402, 4403, 4193, 4404, 4378, 4405, 4390,
     4407, 4410, 4412, 4413, 4415, 4424, 4425, 4426, 4429, 4442,
     4443, 4427, 4431, 4444, 4446, 4440, 4441, 4414, 4447, 4450,
     4451, 4452, 4453, 4454, 4455, 4457, 4458, 4456, 4461, 4466,

     4467, 4462, 4463, 4465, 4470, 4464, 4475, 4476, 4477, 4483,
     4484, 4473, 4474, 4486, 4499, 4480, 4485, 4500, 4505, 4509,
     4510, 4519, 4520, 4514, 4515, 4516, 4521, 4522, 4524, 4527,
     4528, 4531, 4535, 4525, 4526, 4529, 4530, 4534, 4536, 4537,
     4538, 4540, 4541, 4539, 4542, 4561, 4562, 2952, 3387, 4551,
     4560, 4565, 4566, 3623, 3492, 4567, 4574, 4582, 4586, 4577,
     4580, 4597, 3916, 4581, 4587, 4588, 4590, 4591, 4592, 4594,
     4598, 4601, 4604, 4599, 4602, 4603, 4605, 4640, 4627, 4628,
     4596, 4618, 4647, 4629, 4641, 4635, 4636, 4637, 4638, 4658,
     4646, 4657, 4660, 4668, 4661, 4671, 4663, 4673, 4681, 4682,

     4678, 4645, 4672, 4690, 6359, 4699, 4677, 4680, 4702, 6359,
     4689, 4691, 4692, 4693, 4708, 4703, 4728, 6359, 4697, 4700,
     4735, 4738, 4745, 4748, 6359, 4755, 4725, 4736, 4765, 6359,
     4716, 4710, 4737, 4742, 4744, 4746, 4772, 4747, 4752, 4775,
     6359, 4782, 6359, 4793, 6359, 4799, 6359, 4717, 4789, 4806,
     4769, 4770, 4807, 4803, 4812, 6359, 4800, 4801, 4824, 4829,
     6359, 4816, 4811, 4836, 4817, 4832, 4841, 6359, 4849, 4853,
     6359, 4858, 4861, 6359, 4866, 6359, 6359, 4884, 4894, 4904,
     4914, 4924, 4934, 4944, 4954, 4964, 4974, 4984, 4994, 5004,
     5014, 5024, 5034, 5044, 5054, 5064, 5074, 5084, 5094, 5104,

     5114, 5124, 5134, 5144, 5154, 5164, 5174, 5184, 5194, 5200,
     5206, 5212, 5218, 5224, 5230, 5236, 5242, 5248, 5254, 5260,
     5266, 5272, 5278, 5284, 5294, 5298, 5302, 5306, 5310, 5314,
     5318, 5322, 5326, 5330, 5334, 5338, 5342, 5346, 5350, 5354,
     5364, 5369, 5378, 5387, 5396, 5405, 5414, 5423, 5432, 5441,
     5450, 5459, 5468, 5477, 5486, 5495, 5504, 5510, 5516, 5526,
     5530, 5534, 5538, 5542, 5548, 5554, 5560, 5566, 5572, 5578,
     5587, 5596, 5605, 5611, 5617, 5626, 5632, 5638, 5647, 5653,
     5659, 5665, 5674, 5680, 5686, 5695, 5701, 5707, 5716, 5725,
     5734, 5743, 5753, 5763, 5772, 5780, 5787, 5796, 5802, 5810,

     5817, 5826, 5834, 5841, 5850, 5859, 5868, 5877, 5886, 5895,
     5903, 5910, 5918, 5925, 5934, 5943, 5951, 5958, 5967, 5975,
     5982, 5991, 5999, 6006, 6012, 6021, 6029, 6036, 6045, 6053,
     6060, 6069, 6075, 6084, 6094, 6104, 6112, 6119, 6125, 6134,
     6143, 6151, 6158, 6167, 6176, 6185, 6194, 6203, 6209, 6215,
     6219, 6223, 6231, 6238, 6244, 6250, 6256, 6262, 6268, 6274,
     6284, 6294, 6304, 6314, 6324, 6334
    } ;

static yyconst flex_int16_t yy_def[2267] =
    {   0,
     2078, 2078, 2079, 2079, 2079, 2079, 2080, 2080, 2081, 2081,
     2082, 2082, 2083, 2083, 2083, 2083, 2084, 2084, 2078, 2078,
     2085, 2085, 2078, 2078, 2078, 2078, 2086, 2086, 2086, 2086,
     2078, 2078, 2077,   33, 2087, 2087, 2078, 2078, 2087, 2087,
     2087, 2087, 2078, 2078, 2077,   45, 2088, 2088, 2078, 2078,
     2088, 2088, 2088, 2088, 2078, 2078, 2089, 2089, 2090, 2090,
     2078, 2078, 2091, 2091, 2092, 2092, 2078, 2078, 2092, 2092,
     2092, 2092, 2078, 2078, 2093, 2093, 2094, 2094, 2078, 2078,
     2094, 2094, 2094, 2094, 2078, 2078, 2095, 2095, 2096, 2096,
     2078, 2078, 2077,   93, 2097, 2097, 2078, 2078, 2097, 2097,

     2097, 2097, 2078, 2078, 2098, 2098, 2078, 2078, 2078, 2078,
     2078, 2078, 2099, 2099, 2099, 2099, 2078, 2078, 2100, 2100,
     2101, 2101, 2078, 2078, 2102, 2102, 2103, 2103, 2078, 2078,
     2077,  131, 2104, 2104, 2078, 2078, 2104, 2104, 2104, 2104,
     2078, 2078, 2105, 2105, 2106, 2106, 2078, 2078, 2077,  149,
     2107, 2107, 2078, 2078, 2107, 2107, 2107, 2107, 2078, 2078,
     2077,  161, 2108, 2108, 2109, 2109, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2110, 2077, 2077,

     2110, 2110, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2111, 2077, 2077, 2111, 2111, 2111, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2112, 2077, 2077, 2112,
     2112, 2112, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2113, 2077, 2077, 2113, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2114, 2077, 2077, 2114, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2115, 2077, 2077, 2115, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2116, 2077, 2077,
     2116, 2116, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2117,
     2077, 2077, 2117, 2117, 2117, 2117, 2117, 2077, 2077, 2077,

     2077, 2077, 2077, 2077, 2077, 2118, 2077, 2077, 2118, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2119, 2077, 2077,
     2119, 2077, 2077, 2077, 2077, 2077, 2077, 2120, 2077, 2077,
     2120, 2120, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2121,
     2077, 2077, 2121, 2121, 2121, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2122, 2077, 2077, 2122, 2122, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2123, 2077, 2077, 2123, 2123,
     2123, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2124, 2077, 2077, 2124, 2124, 2124, 2124, 2124, 2077, 2077,
     2077, 2077, 2077, 2077, 2125, 2077, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2110, 2110, 2110, 2077, 2077, 2077, 2077, 2126, 2077, 2077,
     2111, 2111, 2111, 2111, 2127, 2077, 2077, 2077, 2077, 2077,
     2077, 2112, 2112, 2112, 2112, 2128, 2077, 2077, 2077, 2113,
     2113, 2129, 2077, 2077, 2114, 2114, 2130, 2077, 2077, 2115,
     2115, 2131, 2077, 2116, 2116, 2116, 2132, 2077, 2117, 2117,
     2117, 2117, 2117, 2117, 2133, 2077, 2077, 2118, 2118, 2077,
     2134, 2077, 2119, 2119, 2135, 2077, 2120, 2120, 2120, 2136,
     2077, 2121, 2121, 2121, 2121, 2137, 2077, 2077, 2122, 2122,
     2122, 2138, 2077, 2123, 2123, 2123, 2123, 2139, 2077, 2124,

     2124, 2124, 2124, 2124, 2124, 2124, 2140, 2077, 2077, 2141,
     2077, 2141, 2077, 2077, 2077, 2142, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2110, 2110, 2077, 2077, 2077, 2077, 2077,
     2077, 2143, 2143, 2111, 2111, 2111, 2144, 2144, 2077, 2077,
     2077, 2077, 2077, 2112, 2112, 2112, 2145, 2145, 2077, 2113,
     2146, 2146, 2114, 2147, 2147, 2077, 2115, 2148, 2148, 2116,
     2116, 2149, 2149, 2117, 2117, 2117, 2117, 2117, 2150, 2150,
     2118, 2077, 2151, 2151, 2119, 2152, 2152, 2120, 2120, 2153,
     2153, 2121, 2121, 2121, 2154, 2154, 2077, 2122, 2122, 2155,
     2155, 2077, 2077, 2123, 2123, 2156, 2156, 2124, 2124, 2124,

     2124, 2124, 2124, 2157, 2157, 2077, 2077, 2141, 2077, 2077,
     2141, 2077, 2077, 2142, 2077, 2077, 2077, 2077, 2077, 2077,
     2110, 2110, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2143,
     2077, 2143, 2111, 2111, 2111, 2077, 2144, 2077, 2144, 2077,
     2077, 2077, 2077, 2077, 2112, 2112, 2112, 2077, 2145, 2077,
     2145, 2077, 2113, 2077, 2146, 2077, 2146, 2114, 2077, 2147,
     2077, 2147, 2077, 2115, 2077, 2148, 2077, 2148, 2116, 2116,
     2077, 2149, 2077, 2149, 2117, 2117, 2117, 2117, 2117, 2077,
     2150, 2077, 2150, 2118, 2077, 2077, 2151, 2077, 2151, 2119,
     2077, 2152, 2077, 2152, 2120, 2120, 2077, 2153, 2077, 2153,

     2121, 2121, 2121, 2077, 2154, 2077, 2154, 2077, 2122, 2122,
     2077, 2155, 2077, 2155, 2077, 2158, 2159, 2123, 2123, 2077,
     2156, 2077, 2156, 2124, 2124, 2124, 2124, 2124, 2124, 2077,
     2157, 2077, 2157, 2077, 2141, 2160, 2077, 2077, 2077, 2077,
     2077, 2110, 2077, 2077, 2110, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2143, 2111, 2077, 2077, 2111, 2144, 2077, 2077,
     2077, 2077, 2112, 2077, 2077, 2112, 2145, 2077, 2077, 2077,
     2146, 2077, 2077, 2147, 2077, 2077, 2148, 2077, 2077, 2116,
     2149, 2117, 2117, 2077, 2077, 2077, 2077, 2117, 2150, 2118,
     2077, 2151, 2077, 2077, 2152, 2077, 2077, 2120, 2153, 2121,

     2077, 2077, 2121, 2154, 2077, 2077, 2077, 2077, 2077, 2155,
     2158, 2159, 2077, 2077, 2123, 2156, 2124, 2124, 2124, 2124,
     2124, 2124, 2157, 2077, 2141, 2160, 2160, 2077, 2160, 2077,
     2077, 2077, 2110, 2077, 2161, 2162, 2110, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2143, 2111, 2077, 2163, 2164, 2111,
     2144, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2165, 2166,
     2112, 2145, 2077, 2077, 2077, 2077, 2146, 2077, 2077, 2077,
     2147, 2077, 2077, 2077, 2148, 2077, 2077, 2077, 2077, 2077,
     2149, 2117, 2117, 2077, 2167, 2168, 2077, 2169, 2170, 2117,
     2171, 2172, 2077, 2173, 2077, 2174, 2175, 2176, 2077, 2177,

     2178, 2077, 2077, 2179, 2077, 2077, 2077, 2180, 2181, 2182,
     2183, 2077, 2077, 2184, 2185, 2077, 2077, 2077, 2186, 2077,
     2077, 2077, 2187, 2188, 2189, 2190, 2191, 2077, 2077, 2191,
     2077, 2077, 2191, 2191, 2192, 2077, 2193, 2194, 2194, 2077,
     2077, 2195, 2196, 2197, 2195, 2077, 2077, 2077, 2077, 2077,
     2077, 2198, 2199, 2200, 2201, 2199, 2202, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2203, 2204, 2205, 2077, 2077, 2077,
     2206, 2207, 2208, 2077, 2077, 2077, 2209, 2210, 2210, 2211,
     2212, 2213, 2214, 2077, 2077, 2215, 2077, 2077, 2077, 2216,
     2217, 2218, 2219, 2220, 2221, 2077, 2077, 2077, 2222, 2077,

     2077, 2077, 2223, 2224, 2225, 2226, 2077, 2227, 2228, 2229,
     2230, 2231, 2077, 2077, 2232, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2233, 2077, 2077, 2234, 2077,
     2235, 2236, 2236, 2077, 2077, 2077, 2077, 2237, 2077, 2238,
     2239, 2077, 2077, 2077, 2077, 2077, 2077, 2240, 2241, 2077,
     2242, 2077, 2243, 2241, 2244, 2077, 2077, 2077, 2077, 2077,
     2077, 2245, 2246, 2247, 2248, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2219, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2225, 2226, 2077,

     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2232, 2077,
     2249, 2250, 2077, 2077, 2077, 2077, 2077, 2251, 2252, 2077,
     2077, 2077, 2077, 2233, 2077, 2077, 2077, 2234, 2077, 2235,
     2236, 2236, 2077, 2077, 2077, 2077, 2239, 2077, 2077, 2077,
     2077, 2240, 2077, 2077, 2241, 2077, 2077, 2077, 2077, 2077,
     2245, 2246, 2247, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2219, 2077, 2077, 2077, 2077, 2225, 2077, 2077, 2077, 2077,
     2077, 2077, 2232, 2249, 2250, 2077, 2077, 2077, 2077, 2253,
     2254, 2077, 2077, 2077, 2077, 2233, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2235, 2236, 2236, 2077, 2077, 2077, 2077,
     2077, 2077, 2240, 2077, 2255, 2256, 2077, 2077, 2077, 2077,
     2246, 2247, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2219, 2077, 2077, 2077, 2077,
     2225, 2077, 2077, 2077, 2077, 2232, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2253, 2077, 2254, 2077, 2077, 2077, 2077,
     2233, 2077, 2077, 2077, 2077, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2236, 2236, 2077, 2257, 2258, 2077,
     2077, 2077, 2077, 2255, 2256, 2077, 2077, 2077, 2246, 2247,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2219, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2233, 2077, 2077, 2077, 2077, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2236, 2236, 2257, 2258, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2246, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2219, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2233, 2077, 2077, 2077, 2077,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,

     2235, 2235, 2236, 2236, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2236, 2236, 2236, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2259, 2260, 2077, 2077, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2236, 2236,
     2236, 2261, 2262, 2077, 2077, 2077, 2077, 2077, 2077, 2259,

     2260, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2236, 2263, 2264, 2261,
     2262, 2077, 2077, 2077, 2077, 2077, 2077, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2263, 2236, 2265, 2264, 2266, 2236, 2077, 2077,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2265, 2077, 2266, 2236, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2077, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,

     2077, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,

     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,

     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,

     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,

     2235, 2235, 2235, 2235, 2077, 2235, 2235, 2235, 2235, 2077,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2077, 2235, 2235,
     2235, 2235, 2235, 2235, 2077, 2235, 2235, 2235, 2235, 2077,
     2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2077, 2235, 2077, 2235, 2077, 2235, 2077, 2235, 2235, 2235,
     2235, 2235, 2235, 2235, 2235, 2077, 2235, 2235, 2235, 2235,
     2077, 2235, 2235, 2235, 2235, 2235, 2235, 2077, 2235, 2235,
     2077, 2235, 2235, 2077, 2235, 2077,    0, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077
    } ;

static yyconst flex_int16_t yy_nxt[6417] =
    {   0,
     2077,  170,  171,  170,  170,  171,  170,  170,  171,  170,
      170,  171,  170,  178, 2077,  172,  178,  181,  172,  181,
      179,  173,  609,  179,  173,  175,  171,  175,  175,  171,
      175,  184,  185,  182,  937,  182,  186,  187,  515,  176,
      184,  185,  176,  511,  188,  186,  187,  184,  185,  609,
      189,  395,  186,  188,  184,  185,  512,  189, 1031,  186,
      188,  191,  192,  191,  192,  396,  395,  188,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      397,  516,  194,  517, 1494,  194,  518,  515,  203,  613,
      193,  203,  193,  195,  196,  171,  196,  195,  195,  195,

      195,  195,  195,  195,  197,  195,  503,  195,  199,  195,
      200,  195,  171,  171,  171,  171,  171,  171,  205,  171,
      205,  609,  526,  195,  195,  735,  203,  504,  609,  203,
      527,  609,  206,  201,  394,  394,  394, 1130,  202,  195,
      196,  171,  196,  195,  195,  195,  195,  195,  195,  195,
      197,  195,  828,  195,  199,  195,  200,  195,  205,  171,
      205,  205,  171,  205,  205,  171,  205, 1339,  540,  195,
      195, 1033,  206, 1495, 1496,  207,  541,  746,  207,  201,
      171,  171,  171,  398,  202,  171,  171,  171,  394,  394,
      394,  394,  394,  394,  208,  747, 1113,  397, 1114,  208,

      209,  210,  171,  210,  209,  209,  209,  209,  209,  209,
      209,  211,  209,  212,  209,  213,  209,  214,  209,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      209,  209,  212,  212,  212,  212,  212,  212,  212,  212,
      215,  212,  212,  212,  212,  216,  212,  212,  212,  212,
      212,  217,  212,  212,  212,  212,  212,  219,  171,  219,
      219,  171,  219,  171,  171,  171,  171,  171,  171,  828,
      609,  220,  609, 1115,  220, 1116,  828,  221,  611,  398,
      221,  219,  171,  219,  219,  171,  219,  219,  171,  219,
      219,  171,  219,  397, 1275,  220, 1397, 1032,  220,  609,

     1497,  222,  609,  398,  222,  171,  171,  171,  171,  171,
      171,  394,  394,  394,  394,  394,  394,  397, 1334,  223,
     1498, 1338,  223,  224,  225,  171,  225,  224,  224,  224,
      224,  224,  224,  224,  226,  224,  227,  224,  228,  224,
      229,  224,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  224,  224,  227,  227,  230,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  231,  227,
      227,  227,  227,  232,  227,  227,  227,  227,  227,  227,
      234,  171,  234,  234,  171,  234,  171,  171,  171,  171,
      171,  171,  828,  828,  235,  828,  828,  235,  609,  609,

      236, 1499,  398,  236,  234,  171,  234,  234,  171,  234,
      234,  171,  234,  234,  171,  234,  397, 1392,  235, 1276,
     1403,  235, 1331, 1404,  237, 1132,  398,  237,  171,  171,
      171,  171,  171,  171,  394,  394,  394,  394,  394,  394,
      397,  828,  238,  828,  419,  238,  239,  240,  171,  240,
      239,  239,  239,  239,  239,  239,  239,  241,  239,  609,
      239,  243,  239,  244,  239,  247,  171,  247,  247,  171,
      247, 1522, 1205,  417, 1206, 1523,  239,  239, 1446,  248,
      828,  609,  248,  245,  239,  240,  171,  240,  239,  239,
      239,  239,  239,  239,  239,  241,  239, 1131,  239,  243,

      239,  244,  239,  171,  171,  171,  171,  171,  171,  394,
      394,  394,  828, 1399,  239,  239, 1524,  249,  609,  609,
      249,  245,  250,  251,  171,  251,  250,  250,  250,  250,
      250,  250,  250,  252,  250, 1341,  250,  254,  250,  255,
      250,  258,  171,  258,  258,  171,  258,  171,  171,  171,
      398,  398,  250,  250, 1453,  259, 1481, 1525,  259, 1526,
     1527,  260,  609, 1549,  397,  397, 1550,  256,  250,  251,
      171,  251,  250,  250,  250,  250,  250,  250,  250,  252,
      250,  409,  250,  254,  250,  255,  250,  171,  171,  171,
      258,  171,  258,  258,  171,  258, 1391,  398,  250,  250,

      828,  260, 1567,  609,  259, 1567,  609,  259,  258,  171,
      258,  397,  398,  256,  258,  171,  258,  171,  171,  171,
      398,  398,  261,  171,  171,  171,  397,  418,  261, 1342,
     1485,  262, 1400,  438,  397,  397,  609,  262,  263,  264,
      171,  264,  263,  263,  263,  263,  263,  263,  263,  265,
      263, 1330,  263,  267,  263,  268,  263,  271,  171,  271,
      271,  171,  271,  171,  171,  171,  398,  398,  263,  263,
      437,  272, 1567,  425,  272,  828,  829,  260,  609, 1585,
      397,  397,  609,  269,  263,  264,  171,  264,  263,  263,
      263,  263,  263,  263,  263,  265,  263, 1337,  263,  267,

      263,  268,  263,  171,  171,  171,  271,  171,  271,  271,
      171,  271, 1396,  398,  263,  263,  609,  260, 1567,  609,
      272,  609,  398,  272,  271,  171,  271,  397,  398,  269,
      271,  171,  271,  171,  171,  171,  397,  398,  273,  171,
      171,  171,  397, 1447,  273, 1402, 1401,  274,  394,  394,
      394,  397,  609,  274,  275,  276,  171,  276,  275,  275,
      275,  275,  275,  275,  275,  277,  275, 1340,  275,  279,
      275,  280,  275,  284,  171,  284,  284,  171,  284,  171,
      171,  171,  398,  398,  275,  275,  398,  285,  398,  436,
      285,  609,  398,  286, 1601,  436,  397,  397, 1475,  281,

      397, 1564,  397,  394,  394,  394,  397,  282,  275,  276,
      171,  276,  275,  275,  275,  275,  275,  275,  275,  277,
      275,  609,  275,  279,  275,  280,  275,  171,  171,  171,
      299,  171,  299,  299,  171,  299, 1441,  437,  275,  275,
      609,  286,  609,  398,  300,  398,  398,  300,  394,  394,
      394,  825,  442,  281,  394,  394,  394,  397, 1476,  397,
      397,  282,  287,  288,  171,  288,  287,  287,  287,  287,
      287,  287,  287,  289,  287,  290,  287,  291,  287,  292,
      287,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  287,  287,  290,  290,  290,  293,  290,  290,

      290,  290,  294,  290,  290,  290,  290,  295,  290,  290,
      290,  290,  290,  296,  297,  290,  290,  290,  290,  171,
      171,  171,  171,  171,  171,  299,  171,  299,  299,  171,
      299,  609, 1393,  236,  609,  609,  236,  609,  609,  300,
      609,  398,  300,  299,  171,  299,  299,  171,  299,  171,
      171,  171,  171,  171,  171,  397, 1448,  301, 1474, 1470,
      301, 1442, 1511,  302, 1445, 1398,  302,  303,  304,  171,
      304,  303,  303,  303,  303,  303,  303,  303,  305,  303,
      609,  303,  307,  303,  308,  303,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  609, 1443,  303,  303,  528,

      310,  398, 1092,  310,  184,  185,  310, 1469,  447,  186,
      394,  394,  394,  529, 1444,  397, 1093,  392, 1449,  309,
      303,  304,  171,  304,  303,  303,  303,  303,  303,  303,
      303,  305,  303,  393,  303,  307,  303,  308,  303,  171,
      171,  171,  171,  171,  171,  171,  171,  171, 1468,  609,
      303,  303, 1467,  310,  609, 1599,  310,  828,  609,  310,
      312,  171,  312,  312,  171,  312,  312,  171,  312,  312,
      171,  312,  309, 1452,  313, 1394, 1395,  313, 1454,  398,
      314,  609,  609,  314,  171,  171,  171,  171,  171,  171,
      394,  394,  394,  397,  394,  394,  394, 1450,  310, 1477,

      609,  310,  315,  316,  171,  316,  315,  315,  315,  315,
      315,  315,  315,  317,  315,  443,  315,  319,  315,  320,
      315,  323,  171,  323,  323,  171,  323,  171,  171,  171,
      398,  398,  315,  315, 1486,  324,  609,  452,  324, 1466,
     1465,  236, 1603, 1464,  397,  397,  609,  321,  315,  316,
      171,  316,  315,  315,  315,  315,  315,  315,  315,  317,
      315, 1451,  315,  319,  315,  320,  315,  171,  171,  171,
      334,  171,  334,  334,  171,  334,  416,  398,  315,  315,
      609,  236, 1463, 1462,  335, 1461, 1607,  335,  394,  394,
      394,  397,  609,  321,  325,  326,  171,  326,  325,  325,

      325,  325,  325,  325,  325,  327,  325, 1478,  325,  329,
      325,  330,  325,  171,  171,  171,  171,  171,  171,  347,
      171,  347,  430, 1094,  325,  325, 1120,  336,  398, 1122,
      336,  398, 1162,  348,  394,  394,  394, 1095,  457,  331,
     1121,  609,  397, 1123, 1460,  397, 1163,  332,  325,  326,
      171,  326,  325,  325,  325,  325,  325,  325,  325,  327,
      325,  426,  325,  329,  325,  330,  325,  347,  171,  347,
      171,  171,  171,  171,  171,  171, 1480, 1164,  325,  325,
      609,  348, 1459, 1166,  349,  398, 1168,  349,  394,  394,
      394, 1165,  465,  331,  394,  394,  394, 1167, 1506,  397,

     1169,  332,  337,  338,  171,  338,  337,  337,  337,  337,
      337,  337,  337,  339,  337,  340,  337,  341,  337,  342,
      337,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  337,  337,  340,  340,  343,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  344,  340,  340,
      340,  345,  340,  340,  340,  340,  340,  340,  340,  347,
      171,  347,  347,  171,  347,  347,  171,  347,  347,  171,
      347, 1458, 1457,  348, 1440, 1439,  348,  609,  398,  350,
      609,  609,  350,  171,  171,  171,  171,  171,  171,  394,
      394,  394,  397,  394,  394,  394, 1479,  349, 1531, 1488,

      349,  351,  352,  171,  352,  351,  351,  351,  351,  351,
      351,  351,  353,  351,  448,  351,  355,  351,  356,  351,
      360,  171,  360,  360,  171,  360,  171,  171,  171,  609,
      398,  351,  351, 1179,  361,  398,  398,  361,  609, 1544,
      362, 1541,  471,  465,  397, 1615,  357, 1180,  609,  397,
      397, 1545,  358,  351,  352,  171,  352,  351,  351,  351,
      351,  351,  351,  351,  353,  351,  466,  351,  355,  351,
      356,  351,  171,  171,  171,  373,  171,  373,  373,  171,
      373, 1528, 1181,  351,  351,  437,  362,  609, 1197,  374,
     1438,  609,  374,  394,  394,  394, 1182, 1571,  357,  394,

      394,  394, 1198, 1552,  358,  363,  364,  171,  364,  363,
      363,  363,  363,  363,  363,  363,  365,  363,  366,  363,
      367,  363,  368,  363,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  363,  363,  366,  366,  366,
      366,  366,  366,  366,  366,  369,  366,  366,  366,  366,
      370,  366,  366,  366,  366,  366,  366,  371,  366,  366,
      366,  366,  171,  171,  171,  171,  171,  171,  373,  171,
      373,  373,  171,  373,  609,  609,  375,  609,  609,  375,
     1437,  609,  374,  609, 1199,  374,  373,  171,  373,  373,
      171,  373,  171,  171,  171,  171,  171,  171, 1200, 1509,

      376, 1588, 1530,  376, 1482, 1434,  377, 1484, 1510,  377,
      378,  379,  171,  379,  378,  378,  378,  378,  378,  378,
      378,  380,  378,  381,  378,  382,  378,  383,  378,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      378,  378,  381,  381,  381,  381,  381,  381,  381,  384,
      381,  381,  381,  385,  381,  381,  386,  381,  381,  387,
      381,  381,  388,  381,  381,  381,  381,  390,  171,  390,
      390,  171,  390,  184,  185,  403, 1223,  398,  186,  398,
      398,  391, 1433,  398,  391,  398,  392,  471,  609,  398,
     1224,  397,  418,  397,  397, 1432,  447,  397, 1431,  397,

      609,  404,  393,  397,  398, 1483,  398,  405,  394,  394,
      394,  425,  406,  414,  398,  470,  470,  407,  397,  415,
      397,  414,  416,  609,  417,  429,  609,  415,  397, 1540,
      416,  429,  417,  394,  394,  394,  417,  426,  398, 1430,
      427, 1502, 1532,  398,  428,  452,  429,  426,  429,  430,
      427,  398,  397,  417,  428,  398,  429,  397,  475,  430,
     1429,  398,  480,  609, 1225,  397,  394,  394,  394,  397,
      394,  394,  394, 1348,  398,  397, 1428,  398, 1226,  609,
      429,  486, 1513,  428,  486,  417, 1514, 1349,  397,  398,
      609,  397,  394,  394,  394,  394,  394,  394,  398,  394,

      394,  394,  398,  397,  487,  492,  394,  394,  394,  498,
     1332, 1505,  397,  398,  609,  609,  397,  487, 1333,  398,
      498, 1427,  426, 1350,  609,  427,  507,  397,  394,  394,
      394,  429, 1504,  397,  430,  426, 1544, 1351,  427,  394,
      394,  394, 1563, 1551,  429, 1547,  609,  430,  394,  394,
      394,  592,  592,  592,  629,  629,  629,  629,  629,  629,
      636,  636,  636,  636,  636,  636,  593,  648,  648,  648,
      631,  609, 1424,  631, 1572,  609,  638, 1612,  609,  638,
      648,  648,  648,  650,  654,  654,  654, 1556,  632,  654,
      654,  654,  659,  659,  659,  639,  650,  665,  665,  665,

      656,  659,  659,  659, 1576,  656,  609, 1423,  661,  665,
      665,  665,  609,  667,  671,  671,  671,  661,  671,  671,
      671,  609,  680,  680,  680,  667,  680,  680,  680, 1534,
      673, 1553, 1583,  657,  673,  651, 1422,  662,  682,  686,
      686,  686,  682,  609,  609,  668,  686,  686,  686, 1421,
      691,  691,  691, 1575,  609,  688,  691,  691,  691,  697,
      697,  697,  688, 1554,  674,  683,  693,  697,  697,  697,
     1335,  609,  693,  609,  609,  699,  704,  704,  704,  704,
      704,  704,  609,  699, 1336,  711,  711,  711, 1544, 1592,
      689,  609,  706, 1557, 1561,  706, 1688, 1547,  700,  609,

      694,  713,  711,  711,  711,  592,  592,  592,  715,  715,
      715, 1565,  716,  609,  707,  717,  609, 1664,  713, 1420,
      593,  720,  720,  720,  720,  720,  720,  730,  730,  730,
      730,  730,  730,  714,  743,  743,  743,  722,  609,  609,
      722,  609, 1665,  732, 1419, 1616,  732, 1573, 1580,  744,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  723,
      755,  755,  755,  609,  609,  733,  631, 1669,  609,  631,
     1544, 1418,  631, 1584, 1593,  756,  636,  636,  636,  636,
      636,  636, 1545,  745,  636,  636,  636,  764,  764,  764,
      609,  609,  638, 1417, 1670,  638,  648,  648,  648,  609,

      638, 1587,  765,  648,  648,  648,  753,  648,  648,  648,
     1740, 1577,  650,  769,  769,  769,  654,  654,  654,  650,
      654,  654,  654,  650,  758,  654,  654,  654,  770,  772,
      772,  772,  656,  659,  659,  659,  656,  609,  659,  659,
      659,  656,  609,  609,  773,  775,  775,  775, 1591,  661,
      665,  665,  665,  767,  661,  659,  659,  659,  771,  609,
      776, 1741, 1746,  774, 1416, 1624,  667,  665,  665,  665,
      609,  661,  665,  665,  665,  778,  778,  778,  609,  609,
      777,  609, 1578,  667,  671,  671,  671, 1625,  667, 1594,
      779,  671,  671,  671,  671,  671,  671,  784,  784,  784,

      673,  786,  786,  786,  680,  680,  680,  673, 1415,  609,
      673, 1768,  785,  680,  680,  680,  787,  680,  680,  680,
      682,  686,  686,  686,  686,  686,  686,  609, 1747,  682,
      686,  686,  686,  682,  793,  793,  793,  688,  609, 1579,
      688,  691,  691,  691,  781,  609,  688,  609, 1414,  794,
     1581, 1626,  789,  691,  691,  691,  609,  693,  691,  691,
      691,  796,  796,  796,  792,  697,  697,  697, 1590,  693,
      697,  697,  697, 1674,  693,  609,  797,  697,  697,  697,
      609,  699,  801,  801,  801, 1595,  699,  704,  704,  704,
      609, 1596,  795,  699,  704,  704,  704,  802,  704,  704,

      704, 1600,  609,  706,  609,  806,  806,  806,  609, 1618,
      706,  808,  808,  808,  706,  711,  711,  711, 1597,  799,
      807,  711,  711,  711,  609,  609,  809,  711,  711,  711,
     1628,  713,  715,  715,  715,  609,  716,  713, 1713,  717,
      813,  813,  813,  713,  720,  720,  720, 1602,  804,  720,
      720,  720,  720,  720,  720,  814,  730,  730,  730, 1714,
      722,  730,  730,  730,  609,  722,  609,  609,  722,  730,
      730,  730,  732,  609, 1606,  810, 1617,  732, 1609,  827,
      827,  827,  743,  743,  743,  732,  834,  834,  834, 1413,
      835,  609, 1753,  836,  816,  828,  829,  744,  844,  844,

      844,  629,  629,  629,  755,  755,  755,  609,  847,  847,
      847,  823,  848, 1410, 1689,  849,  609,  631, 1610,  756,
      636,  636,  636,  856,  856,  856,  764,  764,  764,  648,
      648,  648,  845,  858,  858,  858,  638,  859,  857,  609,
      860,  765,  769,  769,  769,  650,  864,  864,  864, 1769,
      865, 1614, 1409,  866, 1408,  851,  609,  770,  654,  654,
      654,  772,  772,  772,  862,  868,  868,  868, 1620,  869,
      609,  609,  870,  609,  656,  609,  773,  659,  659,  659,
      775,  775,  775,  872,  872,  872, 1611,  873,  609, 1754,
      874,  609,  609,  661, 1693,  776,  665,  665,  665, 1613,

      867,  778,  778,  778,  876,  876,  876, 1719,  877,  871,
     1762,  878,  667,  879,  879,  879,  779,  671,  671,  671,
      784,  784,  784,  884,  884,  884, 1720,  885,  880,  609,
      886, 1407,  609,  673,  609,  785,  786,  786,  786, 1629,
      887,  887,  887, 1621,  888, 1632,  875,  889,  680,  680,
      680,  787,  686,  686,  686,  609,  881,  793,  793,  793,
      609,  691,  691,  691,  682,  796,  796,  796,  688,  895,
      895,  895,  794,  896,  609, 1406,  897,  693, 1694,  609,
      797,  899,  899,  899, 1635,  900, 1622,  894,  901,  609,
      891,  902,  902,  902, 1725, 1636,  898,  697,  697,  697,

      905,  905,  905,  801,  801,  801,  903,  907,  907,  907,
      609,  908,  609,  699,  909,  906,  609, 1627,  802,  704,
      704,  704,  806,  806,  806,  913,  913,  913, 1634,  914,
     1405, 1763,  915,  609,  609,  706,  609,  807,  808,  808,
      808, 1631,  916,  916,  916, 1638,  917, 1644,  904,  918,
      711,  711,  711,  809,  813,  813,  813,  911,  922,  922,
      922,  609,  923,  609,  609,  924,  713, 1390, 1639,  814,
      720,  720,  720,  928,  928,  928,  931,  931,  931,  609,
      609,  919,  730,  730,  730, 1648,  722, 1640,  929, 1675,
     1683,  932,  827,  827,  827,  834,  834,  834,  732,  835,

      609,  926,  836,  844,  844,  844,  609, 1641,  828,  629,
      629,  629,  609,  935,  847,  847,  847, 1652,  848, 1643,
      609,  849,  636,  636,  636,  631, 1663,  938,  958,  958,
      958,  959,  959,  959,  856,  856,  856,  609,  638,  609,
      609,  952,  609, 1672,  939, 1695,  962,  962,  962,  857,
      963, 1671, 1651,  964,  609,  957,  858,  858,  858,  609,
      859, 1653,  609,  860,  968,  968,  968,  970,  970,  970,
      864,  864,  864, 1676,  865,  609,  609,  866,  609,  609,
      969,  654,  654,  654,  868,  868,  868, 1389,  869, 1656,
     1798,  870,  659,  659,  659, 1770,  609,  656,  872,  872,

      872, 1684,  873, 1668, 1690,  874,  609, 1388,  661,  665,
      665,  665,  876,  876,  876,  609,  877,  609,  609,  878,
      879,  879,  879,  972, 1687,  667,  974,  974,  974, 1699,
      975,  609,  971,  976, 1771,  880,  671,  671,  671,  609,
      973,  884,  884,  884, 1691,  885, 1696, 1387,  886,  887,
      887,  887,  673,  888, 1700, 1386,  889,  984,  984,  984,
      680,  680,  680,  987,  987,  987,  686,  686,  686,  691,
      691,  691,  985,  895,  895,  895,  682,  896,  988, 1385,
      897,  977,  688,  609,  609,  693,  899,  899,  899, 1701,
      900,  609,  609,  901,  986,  902,  902,  902,  996,  996,

      996, 1384,  997, 1786,  609,  998,  697,  697,  697, 1383,
      903,  905,  905,  905, 1000, 1000, 1000, 1702, 1001,  609,
      990, 1002,  699,  993,  609, 1774,  906,  907,  907,  907,
     1703,  908,  609,  609,  909,  704,  704,  704, 1007, 1007,
     1007,  999,  913,  913,  913, 1704,  914, 1382,  609,  915,
     1705,  706,  916,  916,  916, 1381,  917, 1978, 1706,  918,
      711,  711,  711,  922,  922,  922, 1775,  923, 1380,  609,
      924, 1013, 1013, 1013, 1707,  609,  713,  720,  720,  720,
     1006, 1016, 1016, 1016,  609, 1379, 1014,  928,  928,  928,
     1018, 1018, 1018,  722, 1019,  609, 1017, 1020, 1021, 1021,

     1021, 1710,  929, 1010,  931,  931,  931, 1023, 1023, 1023,
     1711, 1024, 1378, 1022, 1025, 2077, 2077, 2077, 1708,  932,
     1027, 1027, 1027,  730,  730,  730, 1377, 1015, 1376,  609,
     2077, 1035, 1035, 1035,  609, 1028, 2077, 2077, 2077,  732,
     1045, 1045, 1045, 1046, 1046, 1046, 1036,  629,  629,  629,
     1372, 2077, 1709, 1026,  636,  636,  636,  958,  958,  958,
      959,  959,  959,  631, 1056, 1056, 1056, 1371, 1726, 1041,
      638, 1370, 1369, 1029, 1057, 1057, 1057,  609, 1048,  962,
      962,  962,  609,  963, 1721,  609,  964, 1060, 1060, 1060,
      968,  968,  968,  970,  970,  970,  654,  654,  654,  659,

      659,  659, 1061,  609, 1055, 1715,  969,  665,  665,  665,
      609, 1723,  656,  609,  609,  661,  609,  974,  974,  974,
     1727,  975,  609,  667,  976,  671,  671,  671, 1888, 1724,
     1062,  609, 1063, 1066, 1066, 1066, 1068, 1068, 1068, 1716,
     1744,  673,  984,  984,  984, 1074, 1074, 1074, 1067, 1075,
      609, 1069, 1076,  609, 1728, 1064, 1734,  985, 1077, 1077,
     1077,  987,  987,  987, 1079, 1079, 1079, 1366, 1080, 1065,
      609, 1081,  609, 1729, 1078,  609,  988, 1083, 1083, 1083,
      691,  691,  691,  996,  996,  996, 1782,  997,  609,  609,
      998,  609,  609, 1084, 1787, 1730,  693, 1090, 1090, 1090,

     1000, 1000, 1000, 1783, 1001,  609, 1365, 1002,  704,  704,
      704, 1731, 1732, 1091, 1733, 1736, 1087, 1007, 1007, 1007,
     1102, 1102, 1102,  609,  706, 1013, 1013, 1013, 1106, 1106,
     1106, 1745, 1107,  609,  609, 1108, 1103,  720,  720,  720,
     1014,  609, 1099, 1016, 1016, 1016, 1737, 1110, 1110, 1110,
      609, 1111, 1788,  722, 1112, 1018, 1018, 1018, 1017, 1019,
     1766,  609, 1020, 1021, 1021, 1021, 1117, 1117, 1117, 1364,
     1118, 1363, 1362, 1119,  609, 1735, 1109,  609, 1022, 1023,
     1023, 1023,  609, 1024, 1742, 1361, 1025, 1027, 1027, 1027,
     1125, 1125, 1125, 1789, 1126, 1743, 1360, 1127,  730,  730,

      730, 1790, 1028, 1035, 1035, 1035, 1134, 1134, 1134,  609,
     1135, 1756,  609, 1136,  732, 1140, 1140, 1140, 1036, 1045,
     1045, 1045, 1046, 1046, 1046,  629,  629,  629, 1143, 1143,
     1143, 1791, 1751, 1128, 2077, 2077, 2077, 1146, 1146, 1146,
      609,  631,  609, 1144, 1056, 1056, 1056, 1359, 1358, 2077,
     1057, 1057, 1057, 1147, 1060, 1060, 1060, 1148, 1148, 1148,
      609, 1149,  609, 1752, 1150,  654,  654,  654, 1767, 1061,
      659,  659,  659,  609, 1142,  665,  665,  665, 1154, 1154,
     1154,  656, 1066, 1066, 1066,  609,  661,  609,  609, 1145,
      609,  667, 1858, 1792, 1155, 1978, 1757, 1067,  609,  609,

     1151, 1156, 1156, 1156,  609, 1157, 1357, 1758, 1158, 1356,
     1355, 1152, 1153, 1068, 1068, 1068, 1159, 1159, 1159, 1759,
     1160, 1760, 1761, 1161, 1764, 1074, 1074, 1074, 1069, 1075,
      609, 1793, 1076, 1077, 1077, 1077, 1079, 1079, 1079,  609,
     1080,  609,  609, 1081, 1083, 1083, 1083,  609,  609, 1078,
      691,  691,  691, 1090, 1090, 1090, 1177, 1177, 1177,  609,
     1084, 1102, 1102, 1102, 1765, 1772,  693, 1778,  609, 1091,
     1773, 1796, 1178, 1780, 1106, 1106, 1106, 1103, 1107, 1347,
      609, 1108,  720,  720,  720, 1779, 1110, 1110, 1110, 1171,
     1111,  609,  609, 1112, 1346, 1117, 1117, 1117,  722, 1118,

     1983, 1800, 1119, 1125, 1125, 1125, 1806, 1126, 1329,  609,
     1127, 1794, 1201, 1201, 1201, 1204, 1204, 1204, 1207, 1207,
     1207,  609, 1134, 1134, 1134, 1781, 1135, 1183, 1202, 1136,
      609,  609, 1208, 1208, 1208, 1140, 1140, 1140, 1212, 1212,
     1212,  629,  629,  629, 1143, 1143, 1143, 1209, 1214, 1214,
     1214,  609, 1215,  609, 1801, 1216, 1807,  631,  609, 1144,
     1217, 1217, 1217, 1146, 1146, 1146, 1148, 1148, 1148,  609,
     1149,  609, 1795, 1150, 1797, 1218, 1213, 1328,  609, 1147,
     1219, 1219, 1219,  659,  659,  659,  665,  665,  665, 1154,
     1154, 1154, 1802, 1156, 1156, 1156, 1220, 1157,  609,  661,

     1158,  609,  667, 1803, 1816, 1155, 1159, 1159, 1159, 1799,
     1160,  609,  609, 1161,  691,  691,  691,  609, 1221,  609,
     1810, 1222, 1177, 1177, 1177,  720,  720,  720, 1983, 1804,
      693, 1201, 1201, 1201, 1207, 1207, 1207, 1814, 1178, 1327,
      609,  722, 1208, 1208, 1208,  609, 1826, 1202, 1805, 1236,
     1812, 1277, 1277, 1277,  609, 1278,  609, 1209, 1279, 1281,
     1281, 1281, 1212, 1212, 1212, 1282, 1282, 1282, 1808, 1246,
     1204, 1204, 1204, 1214, 1214, 1214,  609, 1215,  609, 1809,
     1216, 1283, 1217, 1217, 1217, 1813,  609, 1286, 1286, 1286,
      609, 1287, 1326,  609, 1288, 1811, 1889, 1218, 1219, 1219,

     1219,  659,  659,  659, 1266,  609, 1267, 1325,  609, 1268,
      665,  665,  665, 1269, 1220, 1270, 1271,  661, 1272, 1815,
     1273, 1822, 1274,  691,  691,  691,  667, 1309, 1309, 1309,
     1315, 1315, 1315, 1277, 1277, 1277, 1859, 1278, 1817,  693,
     1279, 1818, 1310,  609,  609, 1289, 1316, 1345, 1345, 1345,
     1281, 1281, 1281, 1282, 1282, 1282,  609, 1286, 1286, 1286,
     1290, 1287,  609, 1832, 1288, 1304,  659,  659,  659, 1283,
     1353, 1353, 1353, 1367, 1367, 1367,  691,  691,  691, 1309,
     1309, 1309,  661, 1373, 1373, 1373, 1354, 1374,  609, 1819,
     1375,  609,  693, 1823, 1310, 1315, 1315, 1315, 1324,  609,

     1352, 1345, 1345, 1345, 1411, 1411, 1411, 1353, 1353, 1353,
     1368, 1316, 1367, 1367, 1367, 1425, 1425, 1425, 1323,  609,
     1412, 1820, 1322, 1354, 1821, 1373, 1373, 1373,  609, 1374,
     1830, 1426, 1375, 1435, 1435, 1435, 1455, 1455, 1455, 1411,
     1411, 1411, 1425, 1425, 1425, 1435, 1435, 1435, 1436,  609,
      609, 1456,  828, 1827, 1828, 1412,  609, 1864, 1426,  609,
     1436, 1471, 1471, 1471,  609, 1472, 1321,  609, 1473, 1487,
     1487, 1487, 1489, 1489, 1489, 1455, 1455, 1455, 1833, 1491,
     1491, 1491, 1824, 1492, 1838,  609, 1493, 1490,  828, 1825,
     1456,  828, 1471, 1471, 1471,  828, 1472,  609, 1831, 1473,

     1503, 1503, 1503, 1507, 1507, 1507, 1512, 1512, 1512, 1487,
     1487, 1487, 1516, 1516, 1516,  609,  609,  609, 1255,  609,
     1865,  609,  609, 1829, 1990,  609,  609,  609,  609, 1489,
     1489, 1489,  609,  609, 1253, 1515, 1517, 1517, 1517, 1508,
     1518, 1834,  609, 1519, 1490,  828, 1491, 1491, 1491, 1836,
     1492, 1839,  828, 1493, 1840, 1837, 1503, 1503, 1503, 1507,
     1507, 1507,  828,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  609, 1846,  826,  609, 1872,  826,  826,  826,
      828,  826, 1529,  609,  609, 1533, 1320, 1319, 1535, 1535,
     1535,  609, 1318,  826,  826,  826,  826,  826,  826,  826,

      826,  826,  826,  826,  609,  609,  826, 1844,  609,  826,
      826,  826,  828,  826, 1536, 1536, 1536, 1537, 1537, 1537,
     1512, 1512, 1512,  609, 1841,  826,  826, 1539, 1539, 1539,
      609, 1835,  609,  609, 1842, 1317,  609, 1516, 1516, 1516,
     1517, 1517, 1517,  609, 1518, 1314, 1538, 1519,  609, 1843,
     1313,  609,  609,  609,  609, 1845,  828, 1555, 1555, 1555,
     1535, 1535, 1535, 1542,  826,  826,  826,  826,  826, 1548,
      826,  826,  826,  609, 1852,  826,  609,  609,  826,  826,
      826,  828,  826, 1847, 1862, 1848, 1558, 1312, 1311, 1536,
     1536, 1536,  609, 1308,  826,  826,  826,  826,  826,  826,

      826,  826,  826,  826, 1548,  609,  609,  826, 1849,  609,
      826,  826,  826,  828,  826, 1559, 1537, 1537, 1537, 1539,
     1539, 1539, 1569, 1569, 1569, 1863,  826,  826, 1570, 1570,
     1570, 1307,  609,  609, 1306,  609,  609, 1850,  828,  829,
     1851,  609, 1560,  609,  609, 1562, 1555, 1555, 1555, 1582,
     1582, 1582, 1569, 1569, 1569, 1570, 1570, 1570, 1589, 1589,
     1589,  609,  609, 1305, 1854,  609,  609, 1853,  828, 1860,
     1866,  609, 1574,  609,  609, 1582, 1582, 1582, 1604, 1604,
     1604, 1586, 1589, 1589, 1589, 1856,  609,  938, 1608, 1608,
     1608,  609, 1855,  609,  609, 1604, 1604, 1604,  609, 1861,

     1303, 1598,  609,  609,  609, 1857, 1302,  609, 1605,  609,
      609,  609, 1608, 1608, 1608, 1630, 1630, 1630, 1633, 1633,
     1633, 1619, 1868, 1637, 1637, 1637, 1869, 1867,  609, 1896,
     1301,  609,  609, 1870,  609, 1642, 1642, 1642, 1623,  609,
     1630, 1630, 1630, 1874, 1645,  609, 1300, 1646, 1647, 1647,
     1647,  609, 1873, 1633, 1633, 1633,  609, 1649,  609,  609,
     1650, 1637, 1637, 1637,  609, 1654, 1875,  609, 1655,  609,
     1657, 1657, 1657, 1658, 1658, 1658, 1871,  609, 1659, 1659,
     1659, 1642, 1642, 1642, 1876, 1660,  609, 1299, 1661,  609,
     1662, 1662, 1662, 1877,  609, 1298,  609,  609, 1647, 1647,

     1647, 1297, 1666,  609,  609, 1667,  609, 1673, 1673, 1673,
     1882, 1657, 1657, 1657,  609, 1677,  609,  609, 1678, 1692,
     1692, 1692, 1878,  609, 1658, 1658, 1658,  609, 1679, 1879,
     1880, 1680, 1659, 1659, 1659,  609, 1681, 1296, 1883, 1682,
      609,  609, 1662, 1662, 1662,  609, 1685, 1892,  609, 1686,
     1673, 1673, 1673, 1295, 1697,  609,  609, 1698,  609, 1712,
     1712, 1712,  609, 1692, 1692, 1692,  609, 1717,  609, 1294,
     1718, 1722, 1722, 1722, 1886,  609, 1712, 1712, 1712,  609,
     1738, 1881, 1884, 1739, 1748, 1748, 1748,  609, 1885, 1722,
     1722, 1722,  609, 1749,  609,  609, 1750, 1755, 1755, 1755,

      609, 1887, 1748, 1748, 1748,  609, 1776,  609, 1890, 1777,
     1755, 1755, 1755,  609, 1784,  609, 1891, 1785,  609,  609,
      609,  609,  609,  609,  609, 1893,  609,  609, 1898,  609,
      609,  609,  609, 1900, 1906, 1907, 1908, 1894, 1895, 1909,
     1897,  609,  609,  609,  609, 1902,  609, 1903,  609, 1904,
     1901, 1905, 1910, 1911, 1914, 1899, 1915,  609,  609,  609,
      609,  609, 1912,  609,  609, 1918, 1913,  609,  609,  609,
      609,  609,  609,  609,  609,  609, 1930, 1931,  609,  609,
      609,  609,  609,  609,  609, 1920, 1921,  609, 1916, 1917,
      609,  609,  609,  609,  609, 1922, 1923,  609, 1919, 1936,

      609,  609,  609,  609, 1928, 1924, 1925, 1926, 1927, 1929,
     1937, 1938, 1939, 1932, 1933, 1934,  609,  609, 1940, 1941,
     1935, 1944,  609, 1946, 1942, 1943,  609,  609, 1947, 1952,
     1953,  609,  609,  609, 1945, 1948,  609,  609,  609,  609,
     1949,  609,  609,  609,  609,  609,  609,  609,  609, 1954,
     1955,  609,  609,  609,  609,  609,  609,  609,  609,  609,
     1950, 1951, 1960, 1961, 1956, 1958, 1962, 1959,  609, 1957,
     1963, 1976, 1977, 1964, 1965, 1972, 1973,  609,  609,  609,
     1966, 1967,  609,  609,  609, 1968, 1979, 1969, 1970, 1971,
     1974,  609, 1986, 1975,  609, 1980, 1987,  609,  609,  609,

     1981, 1982, 1990,  609,  609,  609, 1999,  609,  609,  609,
     1984,  609, 1999,  609,  609,  609,  609, 1985,  609,  609,
      609,  609,  609, 1993, 1991, 1994, 1995, 1996, 1988, 1997,
     1992, 1989, 2006, 1998, 2000,  609, 2006, 2001, 2002, 2011,
     2003, 2004, 2004, 2004,  609,  609,  609, 2007, 2009, 2009,
     2009, 2012,  609,  609,  609,  609, 2019, 2005,  609, 2017,
     2017, 2017,  609,  609, 2010, 2021, 2022, 2020, 2023, 2008,
     2013, 2014, 2015, 2016,  609, 2018, 2021,  609,  609, 2022,
      609, 2023, 2024, 2024, 2024,  609, 2026, 2026,  609,  609,
      609, 2004, 2004, 2004,  609,  609, 2027,  609, 2025,  609,

     2029, 2029, 2029, 2009, 2009, 2009,  609, 2005,  609,  609,
      609, 2037, 2031, 2037,  609, 2032, 2030,  609, 2050, 2010,
      609, 2050, 2059, 2028, 2033,  609, 2034,  609, 1293, 2017,
     2017, 2017, 2038,  609,  609, 2039, 2040, 2040, 2040, 2042,
     2042, 2042,  609, 2035, 2036, 2018, 2044, 2044, 2044, 2024,
     2024, 2024, 2041,  609,  609, 2043, 2046, 2046, 2046,  609,
     2048,  609, 2045,  609,  609, 2025, 2029, 2029, 2029,  609,
     1292, 2049, 2047, 2055, 2055, 2055, 2040, 2040, 2040, 2053,
     1291, 2054, 2030, 2042, 2042, 2042,  609,  609, 2051, 2056,
     1280, 1265, 2041, 2052, 2044, 2044, 2044, 2059, 2057, 2043,

     2046, 2046, 2046, 2058, 2062, 2063,  609, 2060, 2060, 2060,
     2045, 2064, 2064, 2055, 2055, 2055, 2047,  609,  609, 2069,
      609, 2069, 2072, 2061,  609, 2067, 2067, 2067,  609, 2056,
     2060, 2060, 2060,  609,  609, 2065, 2066, 2070, 2070, 2070,
     2072, 2068, 2067, 2067, 2067, 1264, 2061, 1263, 1262,  609,
     2073, 2073, 2073, 2071, 2070, 2070, 2070, 1261, 2068, 2075,
     2075, 2075, 2073, 2073, 2073, 1260, 2074, 2075, 2075, 2075,
     2071, 1259, 1258, 1257, 1255, 2076, 1253, 1252, 2074, 1251,
     1250, 1249, 1248, 2076,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  242,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  411,  411,  411, 1247, 1245,  411,
      421,  421,  421, 1244, 1243,  421,  432,  432,  432, 1242,
     1241,  432,  440,  440,  440, 1240, 1239,  440,  445,  445,
      445, 1238, 1237,  445,  450,  450,  450, 1235, 1234,  450,
      454,  454,  454, 1233, 1232,  454,  459,  459,  459, 1231,
     1230,  459,  468,  468,  468, 1229, 1228,  468,  473,  473,
      473, 1227, 1211,  473,  477,  477,  477, 1210, 1203,  477,
      482,  482,  482, 1196, 1195,  482,  489,  489,  489, 1194,
     1193,  489,  494,  494,  494, 1192, 1189,  494,  500,  500,
      500, 1188, 1187,  500,  510,  510,  510,  510,  510,  510,

      510,  510, 1186,  510,  532, 1176, 1175,  532,  537, 1174,
     1173,  537,  547, 1172, 1170,  547,  551, 1052, 1050,  551,
      554, 1141, 1139,  554,  558, 1138, 1137,  558,  562, 1039,
     1037,  562,  569, 1133, 1129,  569,  573, 1124, 1105,  573,
      576, 1104, 1101,  576,  580, 1100, 1098,  580,  585, 1097,
     1096,  585,  590, 1089, 1088,  590,  596, 1086, 1085,  596,
      604, 1082, 1073,  604,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  614, 1072, 1071, 1070,  614,  630,
     1059, 1058,  630,  630,  630, 1054,  630,  630,  637, 1052,
     1050,  637,  637,  637, 1049,  637,  637,  649, 1047, 1044,

      649,  649,  649, 1043,  649,  649,  655, 1042, 1039,  655,
      655,  655, 1037,  655,  655,  660, 1034, 1030,  660,  660,
      660, 1005,  660,  660,  666,  989,  979,  666,  666,  666,
      978,  666,  666,  672,  967,  961,  672,  672,  672,  960,
      672,  672,  681,  956,  953,  681,  681,  681,  951,  681,
      681,  687,  950,  949,  687,  687,  687,  948,  687,  687,
      692,  947,  946,  692,  692,  692,  945,  692,  692,  698,
      942,  941,  698,  698,  698,  940,  698,  698,  705,  828,
      936,  705,  705,  705,  934,  705,  705,  712,  933,  930,
      712,  712,  712,  927,  712,  712,  721,  925,  921,  721,

      721,  721,  920,  721,  721,  731,  912,  910,  731,  731,
      731,  893,  731,  731,  811,  811,  811,  892,  890,  811,
      812,  812,  812,  883,  882,  812,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  943,  863,  861,  943,
      944,  855,  854,  944,  954,  853,  852,  954,  955,  850,
      846,  955,  965,  965,  965,  843,  842,  965,  966,  966,
      966,  841,  840,  966,  980,  980,  980,  839,  838,  980,
      981,  981,  981,  837,  833,  981,  982,  982,  982,  832,
      831,  982,  983,  983,  983,  830,  824,  983,  681,  822,
      821,  681,  681,  681,  820,  681,  681,  468,  819,  818,

      468,  468,  468,  468,  817,  468,  687,  815,  805,  687,
      687,  687,  803,  687,  687,  991,  991,  991,  800,  798,
      991,  992,  992,  992,  791,  790,  992,  692,  788,  783,
      692,  692,  692,  782,  692,  692,  994,  994,  994,  780,
      747,  994,  995,  995,  995,  768,  766,  995,  698,  763,
      762,  698,  698,  698,  761,  698,  698, 1003, 1003, 1003,
      760,  746, 1003, 1004, 1004, 1004,  759,  757, 1004,  482,
      482,  482,  754,  752,  482,  705,  751,  750,  705,  705,
      705,  749,  705,  705, 1008, 1008, 1008,  748,  742, 1008,
     1009, 1009, 1009,  741,  740, 1009,  712,  739,  738,  712,

      712,  712,  737,  712,  712, 1011, 1011, 1011,  736,  609,
     1011, 1012, 1012, 1012,  734,  729, 1012,  494,  728,  727,
      494,  494,  494,  494,  726,  494,  721,  725,  724,  721,
      721,  721,  719,  721,  721,  500,  718,  710,  500,  500,
      500,  500,  709,  500,  731,  708,  703,  731,  731,  731,
      702,  731,  731,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  411,  701,  696,  411,  411,  411,  411,
      695,  411, 1038,  690, 1038, 1038, 1038,  685,  684, 1038,
     1040, 1040, 1040, 1040,  679,  678, 1040,  630,  677,  676,

      630,  630,  630,  675,  630,  630,  421,  421,  421,  670,
      669,  421, 1051,  664, 1051, 1051, 1051,  663,  658, 1051,
     1053, 1053, 1053, 1053,  653,  652, 1053,  637,  647,  646,
      637,  637,  637,  645,  637,  637,  965,  644,  965,  965,
      965,  643,  642,  965,  966,  966,  966,  966,  641,  640,
      966,  432,  635,  634,  432,  432,  432,  432,  633,  432,
      655,  628,  627,  655,  655,  655,  626,  655,  655,  660,
      625,  624,  660,  660,  660,  623,  660,  660,  666,  622,
      621,  666,  666,  666,  620,  666,  666,  672,  619,  618,
      672,  672,  672,  617,  672,  672,  459,  616,  615,  459,

      459,  459,  459,  612,  459,  980,  610,  980,  980,  980,
      609,  607,  980,  981,  981,  981,  981,  606,  605,  981,
      982,  603,  982,  982,  982,  602,  601,  982,  983,  983,
      983,  983,  600,  599,  983,  681,  598,  597,  681,  681,
      681,  595,  681,  681,  687,  594,  591,  687,  687,  687,
      589,  687,  687,  991,  588,  991,  991,  991,  587,  586,
      991,  992,  992,  992,  992,  584,  583,  992,  692,  582,
      581,  692,  692,  692,  579,  692,  692,  994,  578,  994,
      994,  994,  577,  575,  994,  995,  995,  995,  995,  574,
      572,  995,  698,  571,  541,  698,  698,  698,  570,  698,

      698, 1003,  568, 1003, 1003, 1003,  567,  566, 1003, 1004,
     1004, 1004, 1004,  565,  564, 1004,  482,  482,  482,  563,
      561,  482,  705,  560,  559,  705,  705,  705,  557,  705,
      705, 1008,  556, 1008, 1008, 1008,  555,  553, 1008, 1009,
     1009, 1009, 1009,  540,  552, 1009,  712,  550,  527,  712,
      712,  712,  549,  712,  712, 1011,  548, 1011, 1011, 1011,
      546,  545, 1011, 1012, 1012, 1012, 1012,  544,  543, 1012,
      721,  529,  542,  721,  721,  721,  539,  721,  721,  500,
      500,  500,  538,  536,  500,  731,  535,  534,  731,  731,
      731,  528,  731,  731,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  608,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826, 1038,  533, 1038, 1038, 1038,  531,
      530, 1038, 1040, 1040, 1040, 1040,  525,  524, 1040,  411,
      411,  411,  523,  522,  411,  630,  521,  520,  630,  630,
      630,  519,  630,  630,  421,  514,  511,  421,  421,  421,
      421,  513,  421, 1051,  509, 1051, 1051, 1051,  508,  506,
     1051, 1053, 1053, 1053, 1053,  505,  502, 1053,  637,  501,
      499,  637,  637,  637,  497,  637,  637,  655,  496,  495,
      655,  655,  655,  493,  655,  655,  660,  491,  490,  660,
      660,  660,  488,  660,  660,  666,  485,  484,  666,  666,

      666,  483,  666,  666,  672,  481,  479,  672,  672,  672,
      478,  672,  672, 1184, 1184, 1184,  476,  474, 1184, 1185,
     1185, 1185,  472,  469, 1185, 1190,  467,  464, 1190, 1191,
      463,  462, 1191, 1254,  461, 1254, 1254, 1254,  460,  458,
     1254, 1256, 1256, 1256, 1256,  456,  455, 1256, 1284, 1284,
     1284,  453,  451, 1284, 1285, 1285, 1285,  449,  446, 1285,
     1343, 1343, 1343,  444,  441, 1343, 1344, 1344, 1344,  439,
      435, 1344, 1500, 1500, 1500,  434,  433, 1500, 1501, 1501,
     1501,  431,  424, 1501, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521,

     1521, 1521, 1521, 1521, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568,  423,  422,  420,  413,  412,  410,
      408,  402,  401,  402,  401,  400,  399, 2077,  167, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077
    } ;

static yyconst flex_int16_t yy_chk[6417] =
    {   0,
        0,    3,    3,    3,    4,    4,    4,    5,    5,    5,
        6,    6,    6,    9,    0,    3,   10,   11,    4,   12,
        9,    5,  825,   10,    6,    7,    7,    7,    8,    8,
        8,   13,   13,   11,  825,   12,   13,   13,  403,    7,
       14,   14,    8,  395,   13,   14,   14,   15,   15,  937,
       15,  172,   15,   14,   16,   16,  395,   16,  937,   16,
       15,   17,   17,   18,   18,  172,  173,   16,   19,   19,
       19,   20,   20,   20,   23,   23,   23,   24,   24,   24,
      173,  403,   19,  404, 1457,   20,  404,  515,   23,  515,
       17,   24,   18,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,  386,   21,   21,   21,
       21,   21,   25,   25,   25,   26,   26,   26,   27,   27,
       27,  611,  414,   21,   21,  611,   25,  386, 1273,   26,
      414, 1031,   27,   21,  170,  170,  170, 1031,   21,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  939,   22,   22,   22,   22,   22,   28,   28,
       28,   29,   29,   29,   30,   30,   30, 1273,  427,   22,
       22,  939,   28, 1458, 1459,   29,  427,  623,   30,   22,
       31,   31,   31,  176,   22,   32,   32,   32,  171,  171,
      171,  175,  175,  175,   31,  623, 1019,  176, 1019,   32,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   35,   35,   35,
       36,   36,   36,   37,   37,   37,   38,   38,   38,  938,
      512,   35, 1335, 1020,   36, 1020, 1205,   37,  512,  199,
       38,   39,   39,   39,   40,   40,   40,   41,   41,   41,
       42,   42,   42,  199, 1205,   39, 1335,  938,   40, 1269,

     1460,   41, 1272,  213,   42,   43,   43,   43,   44,   44,
       44,  196,  196,  196,  205,  205,  205,  213, 1269,   43,
     1461, 1272,   44,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       47,   47,   47,   48,   48,   48,   49,   49,   49,   50,
       50,   50, 1341, 1033,   47, 1342, 1206,   48, 1331, 1267,

       49, 1463,  208,   50,   51,   51,   51,   52,   52,   52,
       53,   53,   53,   54,   54,   54,  208, 1331,   51, 1206,
     1341,   52, 1267, 1342,   53, 1033,  223,   54,   55,   55,
       55,   56,   56,   56,  210,  210,  210,  219,  219,  219,
      223, 1132,   55, 1131,  208,   56,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57, 1395,
       57,   57,   57,   57,   57,   59,   59,   59,   60,   60,
       60, 1494, 1131,  223, 1132, 1495,   57,   57, 1395,   59,
     1032, 1337,   60,   57,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58, 1032,   58,   58,

       58,   58,   58,   61,   61,   61,   62,   62,   62,  225,
      225,  225, 1275, 1337,   58,   58, 1496,   61, 1446, 1402,
       62,   58,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63, 1275,   63,   63,   63,   63,
       63,   65,   65,   65,   66,   66,   66,   67,   67,   67,
      194,  228,   63,   63, 1402,   65, 1446, 1497,   66, 1500,
     1501,   67, 1330, 1522,  194,  228, 1524,   63,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,  194,   64,   64,   64,   64,   64,   68,   68,   68,
       69,   69,   69,   70,   70,   70, 1330,  238,   64,   64,

     1276,   68, 1545, 1450,   69, 1547, 1338,   70,   71,   71,
       71,  238,  243,   64,   72,   72,   72,   73,   73,   73,
      207,  236,   71,   74,   74,   74,  243,  207,   72, 1276,
     1450,   73, 1338,  238,  207,  236, 1266,   74,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75, 1266,   75,   75,   75,   75,   75,   77,   77,   77,
       78,   78,   78,   79,   79,   79,  222,  254,   75,   75,
      236,   77, 1566,  222,   78, 1544, 1544,   79, 1334, 1567,
      222,  254, 1271,   75,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76, 1271,   76,   76,

       76,   76,   76,   80,   80,   80,   81,   81,   81,   82,
       82,   82, 1334,  267,   76,   76, 1339,   80, 1568, 1340,
       81, 1396,  279,   82,   83,   83,   83,  267,  291,   76,
       84,   84,   84,   85,   85,   85,  279,  307,   83,   86,
       86,   86,  291, 1396,   84, 1340, 1339,   85,  234,  234,
      234,  307, 1274,   86,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87, 1274,   87,   87,
       87,   87,   87,   89,   89,   89,   90,   90,   90,   91,
       91,   91,  237,  319,   87,   87,  329,   89,  235,  237,
       90, 1541,  341,   91, 1585,  235,  237,  319, 1439,   87,

      329, 1541,  235,  240,  240,  240,  341,   87,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88, 1391,   88,   88,   88,   88,   88,   92,   92,   92,
       95,   95,   95,   96,   96,   96, 1391,  235,   88,   88,
      735,   92, 1441,  355,   95,  248,  367,   96,  247,  247,
      247,  735,  248,   88,  251,  251,  251,  355, 1441,  248,
      367,   88,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   97,
       97,   97,   98,   98,   98,   99,   99,   99,  100,  100,
      100, 1336, 1332,   97, 1484, 1392,   98, 1397, 1394,   99,
     1332,  382,  100,  101,  101,  101,  102,  102,  102,  103,
      103,  103,  104,  104,  104,  382, 1397,  101, 1437, 1431,
      102, 1392, 1484,  103, 1394, 1336,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
     1393,  105,  105,  105,  105,  105,  107,  107,  107,  108,
      108,  108,  109,  109,  109, 1398, 1393,  105,  105,  415,

      107,  261, 1001,  108,  165,  165,  109, 1429,  261,  165,
      258,  258,  258,  415, 1393,  261, 1001,  165, 1398,  105,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  165,  106,  106,  106,  106,  106,  110,
      110,  110,  111,  111,  111,  112,  112,  112, 1423, 1583,
      106,  106, 1421,  110, 1401, 1583,  111, 1403, 1333,  112,
      113,  113,  113,  114,  114,  114,  115,  115,  115,  116,
      116,  116,  106, 1401,  113, 1333, 1333,  114, 1403,  249,
      115, 1442, 1399,  116,  117,  117,  117,  118,  118,  118,
      264,  264,  264,  249,  271,  271,  271, 1399,  117, 1442,

     1451,  118,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  249,  119,  119,  119,  119,
      119,  121,  121,  121,  122,  122,  122,  123,  123,  123,
      273,  362,  119,  119, 1451,  121, 1587,  273,  122, 1419,
     1417,  123, 1587, 1416,  273,  362, 1400,  119,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120, 1400,  120,  120,  120,  120,  120,  124,  124,  124,
      127,  127,  127,  128,  128,  128,  362,  377,  120,  120,
     1591,  124, 1415, 1414,  127, 1413, 1591,  128,  276,  276,
      276,  377, 1443,  120,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125, 1443,  125,  125,
      125,  125,  125,  129,  129,  129,  130,  130,  130,  133,
      133,  133,  377, 1002,  125,  125, 1024,  129,  286, 1025,
      130,  285, 1075,  133,  284,  284,  284, 1002,  285,  125,
     1024, 1445,  286, 1025, 1410,  285, 1075,  125,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  286,  126,  126,  126,  126,  126,  134,  134,  134,
      135,  135,  135,  136,  136,  136, 1445, 1076,  126,  126,
     1480,  134, 1409, 1080,  135,  301, 1081,  136,  288,  288,
      288, 1076,  301,  126,  299,  299,  299, 1080, 1480,  301,

     1081,  126,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  137,
      137,  137,  138,  138,  138,  139,  139,  139,  140,  140,
      140, 1408, 1407,  137, 1390, 1389,  138, 1505,  262,  139,
     1453, 1444,  140,  141,  141,  141,  142,  142,  142,  304,
      304,  304,  262,  312,  312,  312, 1444,  141, 1505, 1453,

      142,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  262,  143,  143,  143,  143,  143,
      145,  145,  145,  146,  146,  146,  147,  147,  147, 1515,
      302,  143,  143, 1107,  145,  314,  300,  146, 1599, 1518,
      147, 1515,  314,  300,  302, 1599,  143, 1107, 1502,  314,
      300, 1518,  143,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  302,  144,  144,  144,
      144,  144,  148,  148,  148,  151,  151,  151,  152,  152,
      152, 1502, 1108,  144,  144,  300,  148, 1552, 1126,  151,
     1388, 1529,  152,  316,  316,  316, 1108, 1552,  144,  323,

      323,  323, 1126, 1529,  144,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  153,  153,  153,  154,  154,  154,  155,  155,
      155,  156,  156,  156, 1483, 1447,  153, 1504, 1449,  154,
     1387, 1482,  155, 1572, 1127,  156,  157,  157,  157,  158,
      158,  158,  159,  159,  159,  160,  160,  160, 1127, 1482,

      157, 1572, 1504,  158, 1447, 1384,  159, 1449, 1483,  160,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  163,  163,  163,
      164,  164,  164,  166,  166,  186, 1160,  203,  166,  310,
      313,  163, 1382,  274,  164,  206,  166,  313, 1448,  259,
     1160,  203,  206,  310,  313, 1379,  259,  274, 1378,  206,

     1514,  186,  166,  259,  220, 1448,  260,  186,  326,  326,
      326,  220,  186,  203,  221,  310,  313,  186,  220,  203,
      260,  206,  203, 1506,  203,  274, 1476,  206,  221, 1514,
      206,  259,  206,  334,  334,  334,  259,  220,  272, 1377,
      220, 1476, 1506,  336,  220,  272,  220,  221,  260,  220,
      221,  324,  272,  260,  221,  335,  221,  336,  324,  221,
     1376,  349,  335, 1486, 1161,  324,  338,  338,  338,  335,
      347,  347,  347, 1287,  348,  349, 1371,  350, 1161, 1479,
      272,  348, 1486,  336,  350,  272, 1486, 1287,  348,  375,
     1268,  350,  352,  352,  352,  360,  360,  360,  361,  364,

      364,  364,  374,  375,  349,  361,  373,  373,  373,  374,
     1268, 1479,  361,  376, 1540, 1478,  374,  348, 1268,  391,
      376, 1369,  375, 1288, 1528,  375,  391,  376,  379,  379,
      379,  375, 1478,  391,  375,  374, 1519, 1288,  374,  390,
      390,  390, 1540, 1528,  374, 1519, 1553,  374,  394,  394,
      394,  495,  495,  495,  532,  532,  532,  533,  533,  533,
      537,  537,  537,  538,  538,  538,  495,  547,  547,  547,
      532, 1596, 1366,  533, 1553, 1533,  537, 1596, 1557,  538,
      548,  548,  548,  547,  551,  551,  551, 1533,  533,  552,
      552,  552,  554,  554,  554,  538,  548,  558,  558,  558,

      551,  555,  555,  555, 1557,  552, 1508, 1365,  554,  559,
      559,  559, 1530,  558,  562,  562,  562,  555,  563,  563,
      563, 1564,  569,  569,  569,  559,  570,  570,  570, 1508,
      562, 1530, 1564,  552,  563,  548, 1364,  555,  569,  573,
      573,  573,  570, 1556, 1531,  559,  574,  574,  574, 1363,
      576,  576,  576, 1556, 1270,  573,  577,  577,  577,  580,
      580,  580,  574, 1531,  563,  570,  576,  581,  581,  581,
     1270, 1576,  577, 1664, 1534,  580,  585,  585,  585,  586,
      586,  586, 1538,  581, 1270,  590,  590,  590, 1546, 1576,
      574, 1645,  585, 1534, 1538,  586, 1664, 1546,  581, 1542,

      577,  590,  591,  591,  591,  592,  592,  592,  593,  593,
      593, 1542,  593, 1554,  586,  593, 1646, 1645,  591, 1362,
      592,  596,  596,  596,  597,  597,  597,  604,  604,  604,
      605,  605,  605,  591,  622,  622,  622,  596, 1561, 1600,
      597, 1649, 1646,  604, 1361, 1600,  605, 1554, 1561,  622,
      629,  629,  629,  630,  630,  630,  632,  632,  632,  597,
      634,  634,  634, 1565, 1577,  605,  629, 1649, 1650,  630,
     1543, 1360,  632, 1565, 1577,  634,  636,  636,  636,  637,
      637,  637, 1543,  622,  639,  639,  639,  646,  646,  646,
     1571, 1713,  636, 1359, 1650,  637,  648,  648,  648, 1558,

      639, 1571,  646,  649,  649,  649,  632,  651,  651,  651,
     1713, 1558,  648,  653,  653,  653,  654,  654,  654,  649,
      655,  655,  655,  651,  639,  657,  657,  657,  653,  658,
      658,  658,  654,  659,  659,  659,  655, 1575,  660,  660,
      660,  657, 1714, 1719,  658,  664,  664,  664, 1575,  659,
      665,  665,  665,  651,  660,  662,  662,  662,  657, 1609,
      664, 1714, 1719,  662, 1358, 1609,  665,  666,  666,  666,
     1559,  662,  668,  668,  668,  669,  669,  669, 1740, 1578,
      668, 1610, 1559,  666,  671,  671,  671, 1610,  668, 1578,
      669,  672,  672,  672,  674,  674,  674,  677,  677,  677,

      671,  678,  678,  678,  680,  680,  680,  672, 1357, 1720,
      674, 1740,  677,  681,  681,  681,  678,  683,  683,  683,
      680,  686,  686,  686,  687,  687,  687, 1560, 1720,  681,
      689,  689,  689,  683,  690,  690,  690,  686, 1562, 1560,
      687,  691,  691,  691,  674, 1611,  689, 1654, 1356,  690,
     1562, 1611,  683,  692,  692,  692, 1574,  691,  694,  694,
      694,  695,  695,  695,  689,  697,  697,  697, 1574,  692,
      698,  698,  698, 1654,  694, 1579,  695,  700,  700,  700,
     1580,  697,  702,  702,  702, 1579,  698,  704,  704,  704,
     1584, 1580,  694,  700,  705,  705,  705,  702,  707,  707,

      707, 1584, 1603,  704, 1688,  709,  709,  709, 1581, 1603,
      705,  710,  710,  710,  707,  711,  711,  711, 1581,  700,
      709,  712,  712,  712, 1613, 1689,  710,  714,  714,  714,
     1613,  711,  715,  715,  715, 1586,  715,  712, 1688,  715,
      718,  718,  718,  714,  720,  720,  720, 1586,  707,  721,
      721,  721,  723,  723,  723,  718,  730,  730,  730, 1689,
      720,  731,  731,  731, 1590,  721, 1602, 1593,  723,  733,
      733,  733,  730, 1725, 1590,  714, 1602,  731, 1593,  736,
      736,  736,  743,  743,  743,  733,  744,  744,  744, 1355,
      744, 1665, 1725,  744,  723,  736,  736,  743,  752,  752,

      752,  753,  753,  753,  755,  755,  755, 1594,  756,  756,
      756,  733,  756, 1351, 1665,  756, 1741,  753, 1594,  755,
      758,  758,  758,  763,  763,  763,  764,  764,  764,  767,
      767,  767,  753,  765,  765,  765,  758,  765,  763, 1598,
      765,  764,  769,  769,  769,  767,  770,  770,  770, 1741,
      770, 1598, 1350,  770, 1349,  758, 1605,  769,  771,  771,
      771,  772,  772,  772,  767,  773,  773,  773, 1605,  773,
     1726, 1669,  773, 1693,  771, 1595,  772,  774,  774,  774,
      775,  775,  775,  776,  776,  776, 1595,  776, 1597, 1726,
      776, 1734, 1694,  774, 1669,  775,  777,  777,  777, 1597,

      771,  778,  778,  778,  779,  779,  779, 1693,  779,  774,
     1734,  779,  777,  780,  780,  780,  778,  781,  781,  781,
      784,  784,  784,  785,  785,  785, 1694,  785,  780, 1614,
      785, 1348, 1606,  781, 1617,  784,  786,  786,  786, 1614,
      787,  787,  787, 1606,  787, 1617,  777,  787,  789,  789,
      789,  786,  792,  792,  792, 1670,  781,  793,  793,  793,
     1699,  795,  795,  795,  789,  796,  796,  796,  792,  794,
      794,  794,  793,  794, 1620, 1344,  794,  795, 1670, 1607,
      796,  797,  797,  797, 1620,  797, 1607,  792,  797, 1621,
      789,  798,  798,  798, 1699, 1621,  795,  799,  799,  799,

      800,  800,  800,  801,  801,  801,  798,  802,  802,  802,
     1612,  802, 1735,  799,  802,  800, 1619, 1612,  801,  804,
      804,  804,  806,  806,  806,  807,  807,  807, 1619,  807,
     1343, 1735,  807, 1623, 1616,  804, 1629,  806,  808,  808,
      808, 1616,  809,  809,  809, 1623,  809, 1629,  799,  809,
      810,  810,  810,  808,  813,  813,  813,  804,  814,  814,
      814, 1624,  814, 1655, 1660,  814,  810, 1329, 1624,  813,
      816,  816,  816,  818,  818,  818,  820,  820,  820, 1632,
     1625,  810,  823,  823,  823, 1632,  816, 1625,  818, 1655,
     1660,  820,  827,  827,  827,  834,  834,  834,  823,  834,

     1626,  816,  834,  844,  844,  844, 1635, 1626,  827,  845,
      845,  845, 1628,  823,  847,  847,  847, 1635,  847, 1628,
     1644,  847,  851,  851,  851,  845, 1644,  827,  852,  852,
      852,  853,  853,  853,  856,  856,  856, 1652,  851, 1671,
     1651,  845, 1634, 1652,  827, 1671,  857,  857,  857,  856,
      857, 1651, 1634,  857, 1636,  851,  858,  858,  858, 1768,
      858, 1636, 1656,  858,  862,  862,  862,  863,  863,  863,
      864,  864,  864, 1656,  864, 1661, 1742,  864, 1666, 1638,
      862,  867,  867,  867,  868,  868,  868, 1328,  868, 1638,
     1768,  868,  871,  871,  871, 1742, 1648,  867,  872,  872,

      872, 1661,  872, 1648, 1666,  872, 1674, 1327,  871,  875,
      875,  875,  876,  876,  876, 1743,  876, 1663, 1667,  876,
      879,  879,  879,  871, 1663,  875,  880,  880,  880, 1674,
      880, 1675,  867,  880, 1743,  879,  881,  881,  881, 1672,
      875,  884,  884,  884, 1667,  884, 1672, 1326,  884,  887,
      887,  887,  881,  887, 1675, 1325,  887,  890,  890,  890,
      891,  891,  891,  892,  892,  892,  894,  894,  894,  898,
      898,  898,  890,  895,  895,  895,  891,  895,  892, 1324,
      895,  881,  894, 1676, 1756,  898,  899,  899,  899, 1676,
      899, 1677, 1746,  899,  891,  902,  902,  902,  903,  903,

      903, 1323,  903, 1756, 1678,  903,  904,  904,  904, 1322,
      902,  905,  905,  905,  906,  906,  906, 1677,  906, 1679,
      894,  906,  904,  898, 1680, 1746,  905,  907,  907,  907,
     1678,  907, 1681, 1747,  907,  911,  911,  911,  912,  912,
      912,  904,  913,  913,  913, 1679,  913, 1321, 1682,  913,
     1680,  911,  916,  916,  916, 1319,  916, 1948, 1681,  916,
      919,  919,  919,  922,  922,  922, 1747,  922, 1317, 1948,
      922,  925,  925,  925, 1682, 1685,  919,  926,  926,  926,
      911,  927,  927,  927, 1686, 1314,  925,  928,  928,  928,
      929,  929,  929,  926,  929, 1683,  927,  929,  930,  930,

      930, 1685,  928,  919,  931,  931,  931,  932,  932,  932,
     1686,  932, 1313,  930,  932,  933,  933,  933, 1683,  931,
      934,  934,  934,  935,  935,  935, 1312,  926, 1311, 1684,
      933,  942,  942,  942, 1700,  934,  945,  945,  945,  935,
      949,  949,  949,  950,  950,  950,  942,  952,  952,  952,
     1308,  945, 1684,  933,  957,  957,  957,  958,  958,  958,
      959,  959,  959,  952,  960,  960,  960, 1307, 1700,  945,
      957, 1306, 1305,  935,  961,  961,  961, 1695,  952,  962,
      962,  962, 1690,  962, 1695, 1697,  962,  967,  967,  967,
      968,  968,  968,  970,  970,  970,  971,  971,  971,  972,

      972,  972,  967, 1698,  957, 1690,  968,  973,  973,  973,
     1858, 1697,  971, 1701, 1717,  972, 1691,  974,  974,  974,
     1701,  974, 1708,  973,  974,  977,  977,  977, 1858, 1698,
      971, 1702,  972,  978,  978,  978,  979,  979,  979, 1691,
     1717,  977,  984,  984,  984,  985,  985,  985,  978,  985,
     1703,  979,  985, 1753, 1702,  973, 1708,  984,  986,  986,
      986,  987,  987,  987,  988,  988,  988, 1302,  988,  977,
     1754,  988, 1704, 1703,  986, 1757,  987,  990,  990,  990,
      993,  993,  993,  996,  996,  996, 1753,  996, 1705, 1706,
      996, 1707, 1710,  990, 1757, 1704,  993,  999,  999,  999,

     1000, 1000, 1000, 1754, 1000, 1718, 1301, 1000, 1006, 1006,
     1006, 1705, 1706,  999, 1707, 1710,  993, 1007, 1007, 1007,
     1010, 1010, 1010, 1711, 1006, 1013, 1013, 1013, 1014, 1014,
     1014, 1718, 1014, 1758, 1738, 1014, 1010, 1015, 1015, 1015,
     1013, 1709, 1006, 1016, 1016, 1016, 1711, 1017, 1017, 1017,
     1715, 1017, 1758, 1015, 1017, 1018, 1018, 1018, 1016, 1018,
     1738, 1716, 1018, 1021, 1021, 1021, 1022, 1022, 1022, 1300,
     1022, 1299, 1298, 1022, 1759, 1709, 1015, 1728, 1021, 1023,
     1023, 1023, 1760, 1023, 1715, 1297, 1023, 1027, 1027, 1027,
     1028, 1028, 1028, 1759, 1028, 1716, 1296, 1028, 1029, 1029,

     1029, 1760, 1027, 1035, 1035, 1035, 1036, 1036, 1036, 1723,
     1036, 1728, 1761, 1036, 1029, 1044, 1044, 1044, 1035, 1045,
     1045, 1045, 1046, 1046, 1046, 1048, 1048, 1048, 1049, 1049,
     1049, 1761, 1723, 1029, 1054, 1054, 1054, 1055, 1055, 1055,
     1724, 1048, 1739, 1049, 1056, 1056, 1056, 1295, 1294, 1054,
     1057, 1057, 1057, 1055, 1060, 1060, 1060, 1061, 1061, 1061,
     1762, 1061, 1729, 1724, 1061, 1062, 1062, 1062, 1739, 1060,
     1063, 1063, 1063, 1730, 1048, 1064, 1064, 1064, 1065, 1065,
     1065, 1062, 1066, 1066, 1066, 1731, 1063, 1732, 1733, 1054,
     1736, 1064, 1828, 1762, 1065, 1949, 1729, 1066, 1763, 1828,

     1062, 1067, 1067, 1067, 1949, 1067, 1293, 1730, 1067, 1292,
     1291, 1063, 1064, 1068, 1068, 1068, 1069, 1069, 1069, 1731,
     1069, 1732, 1733, 1069, 1736, 1074, 1074, 1074, 1068, 1074,
     1737, 1763, 1074, 1077, 1077, 1077, 1079, 1079, 1079, 1751,
     1079, 1749, 1744, 1079, 1083, 1083, 1083, 1745, 1766, 1077,
     1087, 1087, 1087, 1090, 1090, 1090, 1099, 1099, 1099, 1750,
     1083, 1102, 1102, 1102, 1737, 1744, 1087, 1749, 1770, 1090,
     1745, 1766, 1099, 1751, 1106, 1106, 1106, 1102, 1106, 1285,
     1776, 1106, 1109, 1109, 1109, 1750, 1110, 1110, 1110, 1087,
     1110, 1752, 1764, 1110, 1284, 1117, 1117, 1117, 1109, 1117,

     1955, 1770, 1117, 1125, 1125, 1125, 1776, 1125, 1265, 1955,
     1125, 1764, 1128, 1128, 1128, 1130, 1130, 1130, 1133, 1133,
     1133, 1771, 1134, 1134, 1134, 1752, 1134, 1109, 1128, 1134,
     1777, 1130, 1137, 1137, 1137, 1140, 1140, 1140, 1141, 1141,
     1141, 1142, 1142, 1142, 1143, 1143, 1143, 1137, 1144, 1144,
     1144, 1767, 1144, 1765, 1771, 1144, 1777, 1142, 1772, 1143,
     1145, 1145, 1145, 1146, 1146, 1146, 1148, 1148, 1148, 1773,
     1148, 1786, 1765, 1148, 1767, 1145, 1142, 1264, 1769, 1146,
     1151, 1151, 1151, 1152, 1152, 1152, 1153, 1153, 1153, 1154,
     1154, 1154, 1772, 1156, 1156, 1156, 1151, 1156, 1774, 1152,

     1156, 1780, 1153, 1773, 1786, 1154, 1159, 1159, 1159, 1769,
     1159, 1784, 1796, 1159, 1171, 1171, 1171, 1775, 1152, 1782,
     1780, 1153, 1177, 1177, 1177, 1183, 1183, 1183, 1954, 1774,
     1171, 1201, 1201, 1201, 1207, 1207, 1207, 1784, 1177, 1263,
     1954, 1183, 1208, 1208, 1208, 1778, 1796, 1201, 1775, 1171,
     1782, 1209, 1209, 1209, 1783, 1209, 1779, 1208, 1209, 1211,
     1211, 1211, 1212, 1212, 1212, 1213, 1213, 1213, 1778, 1183,
     1204, 1204, 1204, 1214, 1214, 1214, 1781, 1214, 1859, 1779,
     1214, 1213, 1217, 1217, 1217, 1783, 1204, 1218, 1218, 1218,
     1792, 1218, 1262, 1785, 1218, 1781, 1859, 1217, 1219, 1219,

     1219, 1221, 1221, 1221, 1204, 1787, 1204, 1261, 1788, 1204,
     1222, 1222, 1222, 1204, 1219, 1204, 1204, 1221, 1204, 1785,
     1204, 1792, 1204, 1236, 1236, 1236, 1222, 1241, 1241, 1241,
     1246, 1246, 1246, 1277, 1277, 1277, 1829, 1277, 1787, 1236,
     1277, 1788, 1241, 1829, 1802, 1221, 1246, 1280, 1280, 1280,
     1281, 1281, 1281, 1282, 1282, 1282, 1789, 1286, 1286, 1286,
     1222, 1286, 1793, 1802, 1286, 1236, 1289, 1289, 1289, 1282,
     1290, 1290, 1290, 1303, 1303, 1303, 1304, 1304, 1304, 1309,
     1309, 1309, 1289, 1310, 1310, 1310, 1290, 1310, 1790, 1789,
     1310, 1791, 1304, 1793, 1309, 1315, 1315, 1315, 1260, 1800,

     1289, 1345, 1345, 1345, 1352, 1352, 1352, 1353, 1353, 1353,
     1304, 1315, 1367, 1367, 1367, 1368, 1368, 1368, 1259, 1797,
     1352, 1790, 1258, 1353, 1791, 1373, 1373, 1373, 1798, 1373,
     1800, 1368, 1373, 1386, 1386, 1386, 1404, 1404, 1404, 1411,
     1411, 1411, 1425, 1425, 1425, 1435, 1435, 1435, 1386, 1794,
     1808, 1404, 1404, 1797, 1798, 1411, 1795, 1834, 1425, 1803,
     1435, 1436, 1436, 1436, 1834, 1436, 1257, 1801, 1436, 1452,
     1452, 1452, 1454, 1454, 1454, 1455, 1455, 1455, 1803, 1456,
     1456, 1456, 1794, 1456, 1808, 1452, 1456, 1454, 1454, 1795,
     1455, 1455, 1471, 1471, 1471, 1456, 1471, 1799, 1801, 1471,

     1477, 1477, 1477, 1481, 1481, 1481, 1485, 1485, 1485, 1487,
     1487, 1487, 1488, 1488, 1488, 1804, 1477, 1809, 1256, 1481,
     1835, 1810, 1485, 1799, 1963, 1487, 1806, 1835, 1488, 1489,
     1489, 1489, 1807, 1963, 1254, 1487, 1490, 1490, 1490, 1481,
     1490, 1804, 1816, 1490, 1489, 1489, 1491, 1491, 1491, 1806,
     1491, 1809, 1490, 1491, 1810, 1807, 1503, 1503, 1503, 1507,
     1507, 1507, 1491, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1503, 1816, 1492, 1507, 1842, 1492, 1492, 1492,
     1492, 1492, 1503, 1842, 1814, 1507, 1252, 1251, 1509, 1509,
     1509, 1811, 1250, 1492, 1492, 1493, 1493, 1493, 1493, 1493,

     1493, 1493, 1493, 1493, 1509, 1805, 1493, 1814, 1812, 1493,
     1493, 1493, 1493, 1493, 1510, 1510, 1510, 1511, 1511, 1511,
     1512, 1512, 1512, 1813, 1811, 1493, 1493, 1513, 1513, 1513,
     1510, 1805, 1815, 1511, 1812, 1249, 1512, 1516, 1516, 1516,
     1517, 1517, 1517, 1513, 1517, 1245, 1512, 1517, 1822, 1813,
     1244, 1832, 1817, 1516, 1818, 1815, 1517, 1532, 1532, 1532,
     1535, 1535, 1535, 1516, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1520, 1532, 1822, 1520, 1535, 1819, 1520, 1520,
     1520, 1520, 1520, 1817, 1832, 1818, 1535, 1243, 1242, 1536,
     1536, 1536, 1833, 1240, 1520, 1520, 1521, 1521, 1521, 1521,

     1521, 1521, 1521, 1521, 1521, 1536, 1820, 1521, 1819, 1821,
     1521, 1521, 1521, 1521, 1521, 1536, 1537, 1537, 1537, 1539,
     1539, 1539, 1548, 1548, 1548, 1833, 1521, 1521, 1551, 1551,
     1551, 1239, 1537, 1824, 1238, 1539, 1836, 1820, 1548, 1548,
     1821, 1823, 1537, 1830, 1551, 1539, 1555, 1555, 1555, 1563,
     1563, 1563, 1569, 1569, 1569, 1570, 1570, 1570, 1573, 1573,
     1573, 1825, 1555, 1237, 1824, 1563, 1826, 1823, 1569, 1830,
     1836, 1570, 1555, 1831, 1573, 1582, 1582, 1582, 1588, 1588,
     1588, 1570, 1589, 1589, 1589, 1826, 1827, 1569, 1592, 1592,
     1592, 1582, 1825, 1837, 1588, 1604, 1604, 1604, 1589, 1831,

     1235, 1582, 1840, 1838, 1592, 1827, 1234, 1839, 1589, 1844,
     1866, 1604, 1608, 1608, 1608, 1615, 1615, 1615, 1618, 1618,
     1618, 1604, 1838, 1622, 1622, 1622, 1839, 1837, 1608, 1866,
     1233, 1615, 1845, 1840, 1618, 1627, 1627, 1627, 1608, 1622,
     1630, 1630, 1630, 1844, 1630, 1841, 1232, 1630, 1631, 1631,
     1631, 1627, 1843, 1633, 1633, 1633, 1630, 1633, 1846, 1843,
     1633, 1637, 1637, 1637, 1631, 1637, 1845, 1847, 1637, 1633,
     1639, 1639, 1639, 1640, 1640, 1640, 1841, 1637, 1641, 1641,
     1641, 1642, 1642, 1642, 1846, 1642, 1639, 1231, 1642, 1640,
     1643, 1643, 1643, 1847, 1641, 1230, 1848, 1642, 1647, 1647,

     1647, 1229, 1647, 1849, 1850, 1647, 1643, 1653, 1653, 1653,
     1852, 1657, 1657, 1657, 1647, 1657, 1862, 1852, 1657, 1668,
     1668, 1668, 1848, 1653, 1658, 1658, 1658, 1657, 1658, 1849,
     1850, 1658, 1659, 1659, 1659, 1668, 1659, 1228, 1853, 1659,
     1658, 1856, 1662, 1662, 1662, 1853, 1662, 1862, 1659, 1662,
     1673, 1673, 1673, 1227, 1673, 1851, 1854, 1673, 1662, 1687,
     1687, 1687, 1855, 1692, 1692, 1692, 1673, 1692, 1857, 1226,
     1692, 1696, 1696, 1696, 1856, 1687, 1712, 1712, 1712, 1692,
     1712, 1851, 1854, 1712, 1721, 1721, 1721, 1696, 1855, 1722,
     1722, 1722, 1712, 1722, 1863, 1868, 1722, 1727, 1727, 1727,

     1721, 1857, 1748, 1748, 1748, 1722, 1748, 1870, 1860, 1748,
     1755, 1755, 1755, 1727, 1755, 1860, 1861, 1755, 1748, 1864,
     1865, 1867, 1869, 1861, 1871, 1863, 1755, 1872, 1868, 1873,
     1874, 1888, 1875, 1870, 1876, 1877, 1878, 1864, 1865, 1879,
     1867, 1876, 1877, 1878, 1882, 1872, 1879, 1873, 1883, 1874,
     1871, 1875, 1880, 1881, 1884, 1869, 1885, 1886, 1887, 1880,
     1881, 1884, 1882, 1885, 1889, 1888, 1883, 1890, 1891, 1892,
     1893, 1894, 1895, 1898, 1896, 1897, 1900, 1901, 1899, 1902,
     1903, 1906, 1904, 1900, 1901, 1890, 1891, 1905, 1886, 1887,
     1912, 1913, 1907, 1908, 1909, 1892, 1893, 1916, 1889, 1906,

     1910, 1911, 1917, 1914, 1898, 1894, 1895, 1896, 1897, 1899,
     1907, 1908, 1909, 1902, 1903, 1904, 1915, 1918, 1910, 1911,
     1905, 1914, 1919, 1916, 1912, 1913, 1920, 1921, 1917, 1922,
     1923, 1924, 1925, 1926, 1915, 1918, 1922, 1923, 1927, 1928,
     1919, 1929, 1934, 1935, 1930, 1931, 1936, 1937, 1932, 1924,
     1925, 1938, 1933, 1939, 1940, 1941, 1944, 1942, 1943, 1945,
     1920, 1921, 1930, 1931, 1926, 1928, 1932, 1929, 1950, 1927,
     1933, 1946, 1947, 1934, 1935, 1942, 1943, 1951, 1946, 1947,
     1936, 1937, 1952, 1953, 1956, 1938, 1950, 1939, 1940, 1941,
     1944, 1957, 1958, 1945, 1960, 1951, 1959, 1961, 1964, 1958,

     1952, 1953, 1962, 1959, 1965, 1966, 1972, 1967, 1968, 1969,
     1956, 1970, 1973, 1981, 1962, 1971, 1974, 1957, 1972, 1975,
     1976, 1973, 1977, 1966, 1964, 1967, 1968, 1969, 1960, 1970,
     1965, 1961, 1979, 1971, 1974, 1982, 1980, 1975, 1976, 1984,
     1977, 1978, 1978, 1978, 1979, 1980, 1984, 1981, 1983, 1983,
     1983, 1985, 1986, 1987, 1988, 1989, 1991, 1978, 1985, 1990,
     1990, 1990, 2002, 1991, 1983, 1993, 1995, 1992, 1997, 1982,
     1986, 1987, 1988, 1989, 1992, 1990, 1994, 1993, 1995, 1996,
     1997, 1998, 1999, 1999, 1999, 1994, 2001, 2000, 1996, 2003,
     1998, 2004, 2004, 2004, 2007, 2001, 2002, 2008, 1999, 2000,

     2006, 2006, 2006, 2009, 2009, 2009, 2011, 2004, 2012, 2013,
     2014, 2016, 2007, 2015, 2019, 2008, 2006, 2020, 2032, 2009,
     2016, 2031, 2048, 2003, 2011, 2015, 2012, 2032, 1225, 2017,
     2017, 2017, 2019, 2031, 2048, 2020, 2021, 2021, 2021, 2022,
     2022, 2022, 2027, 2013, 2014, 2017, 2023, 2023, 2023, 2024,
     2024, 2024, 2021, 2028, 2033, 2022, 2026, 2026, 2026, 2034,
     2027, 2035, 2023, 2036, 2038, 2024, 2029, 2029, 2029, 2039,
     1224, 2028, 2026, 2037, 2037, 2037, 2040, 2040, 2040, 2035,
     1223, 2036, 2029, 2042, 2042, 2042, 2051, 2052, 2033, 2037,
     1210, 1200, 2040, 2034, 2044, 2044, 2044, 2049, 2038, 2042,

     2046, 2046, 2046, 2039, 2051, 2052, 2049, 2050, 2050, 2050,
     2044, 2054, 2053, 2055, 2055, 2055, 2046, 2057, 2058, 2063,
     2054, 2062, 2065, 2050, 2053, 2059, 2059, 2059, 2063, 2055,
     2060, 2060, 2060, 2062, 2065, 2057, 2058, 2064, 2064, 2064,
     2066, 2059, 2067, 2067, 2067, 1199, 2060, 1198, 1197, 2066,
     2069, 2069, 2069, 2064, 2070, 2070, 2070, 1196, 2067, 2072,
     2072, 2072, 2073, 2073, 2073, 1195, 2069, 2075, 2075, 2075,
     2070, 1194, 1193, 1192, 1191, 2072, 1190, 1189, 2073, 1188,
     1187, 1186, 1185, 2075, 2078, 2078, 2078, 2078, 2078, 2078,
     2078, 2078, 2078, 2078, 2079, 2079, 2079, 2079, 2079, 2079,

     2079, 2079, 2079, 2079, 2080, 2080, 2080, 2080, 2080, 2080,
     2080, 2080, 2080, 2080, 2081, 2081, 2081, 2081, 2081, 2081,
     2081, 2081, 2081, 2081, 2082, 2082, 2082, 2082, 2082, 2082,
     2082, 2082, 2082, 2082, 2083, 2083, 2083, 2083, 2083, 2083,
     2083, 2083, 2083, 2083, 2084, 2084, 2084, 2084, 2084, 2084,
     2084, 2084, 2084, 2084, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2086, 2086, 2086, 2086, 2086, 2086,
     2086, 2086, 2086, 2086, 2087, 2087, 2087, 2087, 2087, 2087,
     2087, 2087, 2087, 2087, 2088, 2088, 2088, 2088, 2088, 2088,
     2088, 2088, 2088, 2088, 2089, 2089, 2089, 2089, 2089, 2089,

     2089, 2089, 2089, 2089, 2090, 2090, 2090, 2090, 2090, 2090,
     2090, 2090, 2090, 2090, 2091, 2091, 2091, 2091, 2091, 2091,
     2091, 2091, 2091, 2091, 2092, 2092, 2092, 2092, 2092, 2092,
     2092, 2092, 2092, 2092, 2093, 2093, 2093, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2094, 2094, 2094, 2094, 2094, 2094,
     2094, 2094, 2094, 2094, 2095, 2095, 2095, 2095, 2095, 2095,
     2095, 2095, 2095, 2095, 2096, 2096, 2096, 2096, 2096, 2096,
     2096, 2096, 2096, 2096, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2098, 2098, 2098, 2098, 2098, 2098,
     2098, 2098, 2098, 2098, 2099, 2099, 2099, 2099, 2099, 2099,

     2099, 2099, 2099, 2099, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2101, 2101, 2101, 2101, 2101, 2101,
     2101, 2101, 2101, 2101, 2102, 2102, 2102, 2102, 2102, 2102,
     2102, 2102, 2102, 2102, 2103, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2104, 2104, 2104, 2104, 2104, 2104,
     2104, 2104, 2104, 2104, 2105, 2105, 2105, 2105, 2105, 2105,
     2105, 2105, 2105, 2105, 2106, 2106, 2106, 2106, 2106, 2106,
     2106, 2106, 2106, 2106, 2107, 2107, 2107, 2107, 2107, 2107,
     2107, 2107, 2107, 2107, 2108, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2109, 2109, 2109, 2109, 2109, 2109,

     2109, 2109, 2109, 2109, 2110, 2110, 2110, 1184, 1182, 2110,
     2111, 2111, 2111, 1181, 1180, 2111, 2112, 2112, 2112, 1179,
     1176, 2112, 2113, 2113, 2113, 1175, 1174, 2113, 2114, 2114,
     2114, 1173, 1172, 2114, 2115, 2115, 2115, 1170, 1169, 2115,
     2116, 2116, 2116, 1168, 1167, 2116, 2117, 2117, 2117, 1166,
     1165, 2117, 2118, 2118, 2118, 1164, 1163, 2118, 2119, 2119,
     2119, 1162, 1139, 2119, 2120, 2120, 2120, 1138, 1129, 2120,
     2121, 2121, 2121, 1124, 1123, 2121, 2122, 2122, 2122, 1122,
     1121, 2122, 2123, 2123, 2123, 1120, 1116, 2123, 2124, 2124,
     2124, 1115, 1114, 2124, 2125, 2125, 2125, 2125, 2125, 2125,

     2125, 2125, 1113, 2125, 2126, 1098, 1095, 2126, 2127, 1094,
     1093, 2127, 2128, 1092, 1082, 2128, 2129, 1053, 1051, 2129,
     2130, 1047, 1043, 2130, 2131, 1042, 1041, 2131, 2132, 1040,
     1038, 2132, 2133, 1034, 1030, 2133, 2134, 1026, 1012, 2134,
     2135, 1011, 1009, 2135, 2136, 1008, 1005, 2136, 2137, 1004,
     1003, 2137, 2138,  995,  994, 2138, 2139,  992,  991, 2139,
     2140,  989,  983, 2140, 2141, 2141, 2141, 2141, 2141, 2141,
     2141, 2141, 2141, 2141, 2142,  982,  981,  980, 2142, 2143,
      966,  965, 2143, 2143, 2143,  956, 2143, 2143, 2144,  955,
      954, 2144, 2144, 2144,  953, 2144, 2144, 2145,  951,  948,

     2145, 2145, 2145,  947, 2145, 2145, 2146,  946,  944, 2146,
     2146, 2146,  943, 2146, 2146, 2147,  941,  936, 2147, 2147,
     2147,  910, 2147, 2147, 2148,  893,  883, 2148, 2148, 2148,
      882, 2148, 2148, 2149,  861,  855, 2149, 2149, 2149,  854,
     2149, 2149, 2150,  850,  846, 2150, 2150, 2150,  843, 2150,
     2150, 2151,  842,  841, 2151, 2151, 2151,  840, 2151, 2151,
     2152,  839,  838, 2152, 2152, 2152,  837, 2152, 2152, 2153,
      833,  832, 2153, 2153, 2153,  829, 2153, 2153, 2154,  826,
      824, 2154, 2154, 2154,  822, 2154, 2154, 2155,  821,  819,
     2155, 2155, 2155,  817, 2155, 2155, 2156,  815,  812, 2156,

     2156, 2156,  811, 2156, 2156, 2157,  805,  803, 2157, 2157,
     2157,  791, 2157, 2157, 2158, 2158, 2158,  790,  788, 2158,
     2159, 2159, 2159,  783,  782, 2159, 2160, 2160, 2160, 2160,
     2160, 2160, 2160, 2160, 2160, 2160, 2161,  768,  766, 2161,
     2162,  762,  761, 2162, 2163,  760,  759, 2163, 2164,  757,
      754, 2164, 2165, 2165, 2165,  751,  750, 2165, 2166, 2166,
     2166,  749,  748, 2166, 2167, 2167, 2167,  747,  746, 2167,
     2168, 2168, 2168,  745,  742, 2168, 2169, 2169, 2169,  741,
      740, 2169, 2170, 2170, 2170,  739,  734, 2170, 2171,  729,
      728, 2171, 2171, 2171,  727, 2171, 2171, 2172,  726,  725,

     2172, 2172, 2172, 2172,  724, 2172, 2173,  719,  708, 2173,
     2173, 2173,  703, 2173, 2173, 2174, 2174, 2174,  701,  696,
     2174, 2175, 2175, 2175,  685,  684, 2175, 2176,  679,  676,
     2176, 2176, 2176,  675, 2176, 2176, 2177, 2177, 2177,  670,
      663, 2177, 2178, 2178, 2178,  652,  647, 2178, 2179,  645,
      644, 2179, 2179, 2179,  643, 2179, 2179, 2180, 2180, 2180,
      642,  641, 2180, 2181, 2181, 2181,  640,  635, 2181, 2182,
     2182, 2182,  633,  628, 2182, 2183,  627,  626, 2183, 2183,
     2183,  625, 2183, 2183, 2184, 2184, 2184,  624,  621, 2184,
     2185, 2185, 2185,  620,  619, 2185, 2186,  616,  615, 2186,

     2186, 2186,  614, 2186, 2186, 2187, 2187, 2187,  612,  608,
     2187, 2188, 2188, 2188,  606,  603, 2188, 2189,  602,  601,
     2189, 2189, 2189, 2189,  600, 2189, 2190,  599,  598, 2190,
     2190, 2190,  595, 2190, 2190, 2191,  594,  589, 2191, 2191,
     2191, 2191,  588, 2191, 2192,  587,  584, 2192, 2192, 2192,
      583, 2192, 2192, 2193, 2193, 2193, 2193, 2193, 2193, 2193,
     2193, 2193, 2193, 2194, 2194, 2194, 2194, 2194, 2194, 2194,
     2194, 2194, 2194, 2195,  582,  579, 2195, 2195, 2195, 2195,
      578, 2195, 2196,  575, 2196, 2196, 2196,  572,  571, 2196,
     2197, 2197, 2197, 2197,  568,  567, 2197, 2198,  566,  565,

     2198, 2198, 2198,  564, 2198, 2198, 2199, 2199, 2199,  561,
      560, 2199, 2200,  557, 2200, 2200, 2200,  556,  553, 2200,
     2201, 2201, 2201, 2201,  550,  549, 2201, 2202,  546,  545,
     2202, 2202, 2202,  544, 2202, 2202, 2203,  543, 2203, 2203,
     2203,  542,  541, 2203, 2204, 2204, 2204, 2204,  540,  539,
     2204, 2205,  536,  535, 2205, 2205, 2205, 2205,  534, 2205,
     2206,  531,  530, 2206, 2206, 2206,  529, 2206, 2206, 2207,
      528,  527, 2207, 2207, 2207,  526, 2207, 2207, 2208,  525,
      524, 2208, 2208, 2208,  523, 2208, 2208, 2209,  521,  520,
     2209, 2209, 2209,  519, 2209, 2209, 2210,  518,  517, 2210,

     2210, 2210, 2210,  513, 2210, 2211,  511, 2211, 2211, 2211,
      510,  509, 2211, 2212, 2212, 2212, 2212,  508,  507, 2212,
     2213,  506, 2213, 2213, 2213,  505,  504, 2213, 2214, 2214,
     2214, 2214,  503,  502, 2214, 2215,  501,  498, 2215, 2215,
     2215,  497, 2215, 2215, 2216,  496,  492, 2216, 2216, 2216,
      491, 2216, 2216, 2217,  490, 2217, 2217, 2217,  487,  486,
     2217, 2218, 2218, 2218, 2218,  485,  484, 2218, 2219,  483,
      480, 2219, 2219, 2219,  479, 2219, 2219, 2220,  478, 2220,
     2220, 2220,  475,  474, 2220, 2221, 2221, 2221, 2221,  471,
      470, 2221, 2222,  469,  466, 2222, 2222, 2222,  465, 2222,

     2222, 2223,  464, 2223, 2223, 2223,  463,  462, 2223, 2224,
     2224, 2224, 2224,  461,  460, 2224, 2225, 2225, 2225,  457,
      456, 2225, 2226,  455,  452, 2226, 2226, 2226,  451, 2226,
     2226, 2227,  448, 2227, 2227, 2227,  447,  446, 2227, 2228,
     2228, 2228, 2228,  443,  442, 2228, 2229,  441,  438, 2229,
     2229, 2229,  437, 2229, 2229, 2230,  436, 2230, 2230, 2230,
      435,  434, 2230, 2231, 2231, 2231, 2231,  433,  430, 2231,
     2232,  429,  428, 2232, 2232, 2232,  426, 2232, 2232, 2233,
     2233, 2233,  425,  424, 2233, 2234,  423,  422, 2234, 2234,
     2234,  419, 2234, 2234, 2235, 2235, 2235, 2235, 2235, 2235,

     2235, 2235, 2235, 2235, 2236, 2236, 2236, 2236, 2236, 2236,
     2236, 2236, 2236, 2236, 2237,  418, 2237, 2237, 2237,  417,
      416, 2237, 2238, 2238, 2238, 2238,  413,  412, 2238, 2239,
     2239, 2239,  409,  408, 2239, 2240,  407,  406, 2240, 2240,
     2240,  405, 2240, 2240, 2241,  399,  398, 2241, 2241, 2241,
     2241,  396, 2241, 2242,  393, 2242, 2242, 2242,  392,  388,
     2242, 2243, 2243, 2243, 2243,  387,  385, 2243, 2244,  384,
      380, 2244, 2244, 2244,  371, 2244, 2244, 2245,  370,  369,
     2245, 2245, 2245,  365, 2245, 2245, 2246,  358,  357, 2246,
     2246, 2246,  353, 2246, 2246, 2247,  345,  344, 2247, 2247,

     2247,  343, 2247, 2247, 2248,  339,  332, 2248, 2248, 2248,
      331, 2248, 2248, 2249, 2249, 2249,  327,  321, 2249, 2250,
     2250, 2250,  317,  309, 2250, 2251,  305,  297, 2251, 2252,
      296,  295, 2252, 2253,  294, 2253, 2253, 2253,  293,  289,
     2253, 2254, 2254, 2254, 2254,  282,  281, 2254, 2255, 2255,
     2255,  277,  269, 2255, 2256, 2256, 2256,  265,  256, 2256,
     2257, 2257, 2257,  252,  245, 2257, 2258, 2258, 2258,  241,
      232, 2258, 2259, 2259, 2259,  231,  230, 2259, 2260, 2260,
     2260,  226,  217, 2260, 2261, 2261, 2261, 2261, 2261, 2261,
     2261, 2261, 2261, 2261, 2262, 2262, 2262, 2262, 2262, 2262,

     2262, 2262, 2262, 2262, 2263, 2263, 2263, 2263, 2263, 2263,
     2263, 2263, 2263, 2263, 2264, 2264, 2264, 2264, 2264, 2264,
     2264, 2264, 2264, 2264, 2265, 2265, 2265, 2265, 2265, 2265,
     2265, 2265, 2265, 2265, 2266, 2266, 2266, 2266, 2266, 2266,
     2266, 2266, 2266, 2266,  216,  215,  211,  202,  201,  197,
      193,  192,  191,  185,  184,  182,  179,  167, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,

     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[264] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 
    0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
    1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 
    0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 
    0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 
    1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
    1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 
    0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
/* Validating XML processor for litesql.dtd.
 * Generated 2006/10/12 17:40:33.
 *
 * This program was generated with the FleXML XML processor generator.
 * FleXML is Copyright (C) 1999-2005 Kristoffer Rose.  All rights reserved.
 * FleXML is Copyright (C) 2003-2006 Martin Quinson.  All rights reserved.
 * (Id: flexml.pl,v 1.53 2006/07/18 12:12:06 mquinson Exp).
 * 
 * There are two, intertwined parts to this program, part A and part B.
 *
 * Part A
 * ------
 * 
 * Some parts, here collectively called "Part A", are found in the 
 * FleXML package.  They are Copyright (C) 1999-2005 Kristoffer Rose
 * and Copyright (C) 2003-2006 Martin Quinson. All rights reserved.
 *
 * You can redistribute, use, perform, display and/or modify "Part A"
 * provided the following two conditions hold:
 *
 * 1. The program is distributed WITHOUT ANY WARRANTY from the author of
 *    FleXML; without even the implied warranty of MERCHANTABILITY or
 *    FITNESS FOR A PARTICULAR PURPOSE.
 *
 * 2. The program distribution conditions do not in any way affect the
 *    distribution conditions of the FleXML system used to generate this
 *    file or any version of FleXML derived from that system.
 *
 * Notice that these are explicit rights granted to you for files
 * generated by the FleXML system.  For your rights in connection with
 * the FleXML system itself please consult the GNU General Public License.
 * 
 * Part B
 * ------
 * 
 * The other parts, here collectively called "Part B", and which came 
 * from the DTD used by FleXML to generate this program, can be 
 * distributed (or not, as the case may be) under the terms of whoever
 * wrote them, provided these terms respect and obey the two conditions 
 * above under the heading "Part A".
 *
 * The author of and contributors to FleXML specifically disclaim
 * any copyright interest in "Part B", unless "Part B" was written 
 * by the author of or contributors to FleXML.
 * 
 */
#line 49 "scanner.l"

/* Version strings. */
const char rcs_flexml_skeleton[] =
 "$" "Id: skel,v 1.31 2006/07/18 18:21:13 mquinson Exp $";
const char rcs_flexml[] =
 "$" "Id: flexml.pl,v 1.53 2006/07/18 12:12:06 mquinson Exp $";

/* ANSI headers. */
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <stdarg.h>
#include <ctype.h>

/* Generated definitions. */
#define FLEXML_yylineno
#define FLEXML_BUFFERSTACKSIZE 100000

/* XML processor api. */
#include "scanner-globals.hpp"


/* FleXML-provided data. */
const char* pcdata;
AT_type_name A_type_name;
AT_option_name A_option_name;
AT_relation_id A_relation_id;
AT_relate_limit A_relate_limit;
AT_object_name A_object_name;
AT_field_indexed A_field_indexed;
AT_type_sqltype A_type_sqltype;
AT_database_name A_database_name;
AT_database_namespace A_database_namespace;
AT_relation_unidir A_relation_unidir;
AT_method_name A_method_name;
AT_field_default A_field_default;
AT_method_returntype A_method_returntype;
AT_param_type A_param_type;
AT_relate_remotehandle A_relate_remotehandle;
AT_indexfield_name A_indexfield_name;
AT_option_value A_option_value;
AT_if_d_backend_name A_if_d_backend_name;
AT_value_name A_value_name;
AT_relate_object A_relate_object;
AT_database_include A_database_include;
AT_object_temporary A_object_temporary;
AT_field_name A_field_name;
AT_object_inherits A_object_inherits;
AT_value_value A_value_value;
AT_relate_unique A_relate_unique;
AT_method_const A_method_const;
AT_index_unique A_index_unique;
AT_param_name A_param_name;
AT_field_type A_field_type;
AT_type_class A_type_class;
AT_if_d_target_name A_if_d_target_name;
AT_include_file A_include_file;
AT_relate_owner A_relate_owner;
AT_relation_name A_relation_name;
AT_relate_handle A_relate_handle;
AT_field_unique A_field_unique;

/* XML state. */
#ifdef FLEX_DEBUG
# define ENTER(state)	debug_enter(state,#state)
# define LEAVE		debug_leave()
# define SET(state)	debug_set(state,#state)
  static void debug_enter(int, const char*);
  static void debug_leave(void);
  static void debug_set(int, const char*);
#else
# define ENTER(state)	(yy_push_state(state))
# define LEAVE		(yy_pop_state())
# define SET(state)	BEGIN(state)
#endif

/* Generic actions. */
#define SKIP	/*skip*/
#define SUCCEED        CLEANUP; return 0

#define FAIL	return fail
static int fail(const char*, ...);
const char * parse_err_msg(void);

/* Cleanup */
static void cleanup(void);
#define CLEANUP  cleanup()

/* Text buffer stack handling. */
static char bufferstack[FLEXML_BUFFERSTACKSIZE];
static char* limit = bufferstack + FLEXML_BUFFERSTACKSIZE;
typedef struct BufferLast_s {
  struct BufferLast_s *old; const char* saved; char new1[1];
} BufferLast;
#ifdef FLEXML_HasMixed
static BufferLast* last = (BufferLast*)0;
#endif
static char* next = bufferstack;

#define BUFFERSET(P)  (P = next)
#define BUFFERPUTC(C) (assert(next<limit), *(next++) = (C))
#define BUFFERDONE    (BUFFERPUTC('\0'))

#define BUFFERLITERAL(C,P) bufferliteral(C,&(P),yytext)
static void bufferliteral(char c, const char** pp, char* text)
{
  char *s = strchr(text,c), *e = strrchr(text,c);
  assert(s <= e); BUFFERSET(*pp);
  while (++s<e) {
    if (isspace(*s)) { BUFFERPUTC(' '); while (isspace(*s)) ++s; }
    else BUFFERPUTC(*s);
  }
  BUFFERDONE;
}

#ifdef FLEXML_HasMixed
static void pushbuffer(const char* p)
{
  BufferLast* l = (BufferLast*)next;
  assert(next < limit);
  l->old = last;
  l->saved = p;
  next = l->new1;
  last = l;
}

static const char* popbuffer(void)
{
  BufferLast* l = last;
  assert(last != (BufferLast*)0);
  last = l->old;
  next = (char*)l;
  return l->saved;
}
#endif

/* General internal entities are `unput' back onto the input stream... */
#define ENTITYTEXT(T) \
  { char *s = (T), *e = s+strlen(s);\
    while (--e >= s) { unput(*e); }}
/* Flex standard options. */
#define YY_NO_INPUT 1
/* Flex user-requested options. */
/* XML character classes (currently restricted to ASCII). */
/* "Common syntactic structures." */
/* "Names and Tokens." */
/* Miscellaneous. */
/* Parser states (flex `exclusive start conditions'):
 *
 * PROLOG	the XML prolog of the document before <?xml...>
 * DOCTYPE	the XML prolog of the document after <?xml...>
 * EPILOG	after the root element
 * INCOMMENT	inside an XML comment <!--....-->
 * INPI		inside an XML PI <?...?>
 * VALUE1	inside a '...'-delimited literal
 * VALUE2	inside a "..."-delimited literal
 * CDATA	inside a <![CDATA[...] ]> section.
 * ROOT_<tag>	expect root element <tag>
 * AL_<tag>	inside the attribute list for <tag>
 * IN_<tag>	inside a <tag> with element contents (ready for end tag)
 * IMPOSSIBLE	dummy to permit disabling rules; must be last
 */

















#line 256 "scanner.l"
/* State names. */
const char* *statenames=NULL;
#line 2856 "scanner.cpp"

#define INITIAL 0
#define PROLOG 1
#define DOCTYPE 2
#define EPILOG 3
#define INCOMMENT 4
#define INPI 5
#define VALUE1 6
#define VALUE2 7
#define CDATA 8
#define ROOT_database 9
#define AL_database 10
#define S_database 11
#define S_database_1 12
#define S_database_2 13
#define E_database 14
#define ROOT_object 15
#define AL_object 16
#define S_object 17
#define S_object_1 18
#define S_object_2 19
#define E_object 20
#define ROOT_type 21
#define AL_type 22
#define S_type 23
#define S_type_1 24
#define S_type_2 25
#define E_type 26
#define ROOT_include 27
#define AL_include 28
#define E_include 29
#define ROOT_if_d_backend 30
#define AL_if_d_backend 31
#define S_if_d_backend 32
#define S_if_d_backend_1 33
#define S_if_d_backend_2 34
#define E_if_d_backend 35
#define ROOT_if_d_target 36
#define AL_if_d_target 37
#define S_if_d_target 38
#define S_if_d_target_1 39
#define S_if_d_target_2 40
#define E_if_d_target 41
#define ROOT_option 42
#define AL_option 43
#define E_option 44
#define ROOT_field 45
#define AL_field 46
#define S_field 47
#define S_field_1 48
#define S_field_2 49
#define E_field 50
#define ROOT_index 51
#define AL_index 52
#define S_index 53
#define S_index_1 54
#define S_index_2 55
#define S_index_3 56
#define E_index 57
#define ROOT_indexfield 58
#define AL_indexfield 59
#define E_indexfield 60
#define ROOT_value 61
#define AL_value 62
#define E_value 63
#define ROOT_method 64
#define AL_method 65
#define S_method 66
#define S_method_1 67
#define S_method_2 68
#define E_method 69
#define ROOT_param 70
#define AL_param 71
#define E_param 72
#define ROOT_relation 73
#define AL_relation 74
#define S_relation 75
#define S_relation_1 76
#define S_relation_2 77
#define E_relation 78
#define ROOT_relate 79
#define AL_relate 80
#define E_relate 81
#define IMPOSSIBLE 82

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 260 "scanner.l"


 /* Bypass Flex's default INITIAL state and begin by parsing the XML prolog. */
 SET(PROLOG);
  /* FleXML_init */
  next = bufferstack;
  if(!statenames) {statenames= (const char **)calloc(IMPOSSIBLE,sizeof(char*));
  statenames[PROLOG] = NULL;
  statenames[DOCTYPE] = NULL;
  statenames[EPILOG] = NULL;
  statenames[INCOMMENT] = NULL;
  statenames[INPI] = NULL;
  statenames[VALUE1] = NULL;
  statenames[VALUE2] = NULL;
  statenames[CDATA] = NULL;
  statenames[ROOT_database] = NULL;
  statenames[AL_database] = NULL;
  statenames[S_database] = "database";
  statenames[S_database_1] = "database";
  statenames[S_database_2] = "database";
  statenames[E_database] = "database";
  statenames[ROOT_object] = NULL;
  statenames[AL_object] = NULL;
  statenames[S_object] = "object";
  statenames[S_object_1] = "object";
  statenames[S_object_2] = "object";
  statenames[E_object] = "object";
  statenames[ROOT_type] = NULL;
  statenames[AL_type] = NULL;
  statenames[S_type] = "type";
  statenames[S_type_1] = "type";
  statenames[S_type_2] = "type";
  statenames[E_type] = "type";
  statenames[ROOT_include] = NULL;
  statenames[AL_include] = NULL;
  statenames[E_include] = "include";
  statenames[ROOT_if_d_backend] = NULL;
  statenames[AL_if_d_backend] = NULL;
  statenames[S_if_d_backend] = "if-backend";
  statenames[S_if_d_backend_1] = "if-backend";
  statenames[S_if_d_backend_2] = "if-backend";
  statenames[E_if_d_backend] = "if-backend";
  statenames[ROOT_if_d_target] = NULL;
  statenames[AL_if_d_target] = NULL;
  statenames[S_if_d_target] = "if-target";
  statenames[S_if_d_target_1] = "if-target";
  statenames[S_if_d_target_2] = "if-target";
  statenames[E_if_d_target] = "if-target";
  statenames[ROOT_option] = NULL;
  statenames[AL_option] = NULL;
  statenames[E_option] = "option";
  statenames[ROOT_field] = NULL;
  statenames[AL_field] = NULL;
  statenames[S_field] = "field";
  statenames[S_field_1] = "field";
  statenames[S_field_2] = "field";
  statenames[E_field] = "field";
  statenames[ROOT_index] = NULL;
  statenames[AL_index] = NULL;
  statenames[S_index] = "index";
  statenames[S_index_1] = "index";
  statenames[S_index_2] = "index";
  statenames[S_index_3] = "index";
  statenames[E_index] = "index";
  statenames[ROOT_indexfield] = NULL;
  statenames[AL_indexfield] = NULL;
  statenames[E_indexfield] = "indexfield";
  statenames[ROOT_value] = NULL;
  statenames[AL_value] = NULL;
  statenames[E_value] = "value";
  statenames[ROOT_method] = NULL;
  statenames[AL_method] = NULL;
  statenames[S_method] = "method";
  statenames[S_method_1] = "method";
  statenames[S_method_2] = "method";
  statenames[E_method] = "method";
  statenames[ROOT_param] = NULL;
  statenames[AL_param] = NULL;
  statenames[E_param] = "param";
  statenames[ROOT_relation] = NULL;
  statenames[AL_relation] = NULL;
  statenames[S_relation] = "relation";
  statenames[S_relation_1] = "relation";
  statenames[S_relation_2] = "relation";
  statenames[E_relation] = "relation";
  statenames[ROOT_relate] = NULL;
  statenames[AL_relate] = NULL;
  statenames[E_relate] = "relate";
  }

 /* COMMENTS and PIs: handled uniformly for efficiency. */

#line 3190 "scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2078 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6359 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 353 "scanner.l"
ENTER(INCOMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 354 "scanner.l"
ENTER(INPI);
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 357 "scanner.l"
LEAVE;
	YY_BREAK
case 4:
#line 359 "scanner.l"
case 5:
#line 360 "scanner.l"
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 360 "scanner.l"
SKIP;
	YY_BREAK
case YY_STATE_EOF(INCOMMENT):
#line 361 "scanner.l"
FAIL("EOF in comment.");
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 364 "scanner.l"
LEAVE;
	YY_BREAK
case 8:
#line 366 "scanner.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 366 "scanner.l"
SKIP;
	YY_BREAK
case YY_STATE_EOF(INPI):
#line 367 "scanner.l"
FAIL("EOF in PI (processing instruction).");
	YY_BREAK

/* SPACES: skipped uniformly */
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 372 "scanner.l"
SKIP;
	YY_BREAK
/* PROLOG: determine root element and process it. */

case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 377 "scanner.l"
SET(DOCTYPE); 
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 378 "scanner.l"
FAIL("Bad declaration %s.",yytext);
	YY_BREAK


case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 382 "scanner.l"
SET(ROOT_if_d_backend);
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 383 "scanner.l"
SET(ROOT_object);
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 384 "scanner.l"
SET(ROOT_if_d_target);
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 385 "scanner.l"
SET(ROOT_relate);
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 386 "scanner.l"
SET(ROOT_value);
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 387 "scanner.l"
SET(ROOT_include);
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 388 "scanner.l"
SET(ROOT_database);
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 389 "scanner.l"
SET(ROOT_index);
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 390 "scanner.l"
SET(ROOT_relation);
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 391 "scanner.l"
SET(ROOT_method);
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 392 "scanner.l"
SET(ROOT_indexfield);
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 393 "scanner.l"
SET(ROOT_type);
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 394 "scanner.l"
SET(ROOT_option);
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 395 "scanner.l"
SET(ROOT_param);
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 396 "scanner.l"
SET(ROOT_field);
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 397 "scanner.l"
FAIL("Bad declaration %s.",yytext);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 398 "scanner.l"
FAIL("Unexpected character `%c' in prolog.", yytext[0]);
	YY_BREAK
case YY_STATE_EOF(PROLOG):
case YY_STATE_EOF(DOCTYPE):
#line 399 "scanner.l"
FAIL("EOF in prolog.");
	YY_BREAK

/* RULES DERIVED FROM DTD. */
/* <!-- top level database information -->  */
/*           name ID #REQUIRED
  *           namespace NMTOKEN #REQUIRED
  *           include CDATA #IMPLIED>  */
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 410 "scanner.l"
{
  A_database_name = NULL;
  A_database_namespace = NULL;
  A_database_include = NULL;
  ENTER(AL_database);
  }
	YY_BREAK

case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 418 "scanner.l"
BUFFERLITERAL('\'',A_database_name);
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 419 "scanner.l"
BUFFERLITERAL('"',A_database_name);
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 421 "scanner.l"
BUFFERLITERAL('\'',A_database_namespace);
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 422 "scanner.l"
BUFFERLITERAL('"',A_database_namespace);
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 424 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_database_include);
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 425 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_database_include);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 427 "scanner.l"
{
  if (!A_database_name) FAIL("Required attribute `name' not set for `database' element.");
  if (!A_database_namespace) FAIL("Required attribute `namespace' not set for `database' element.");
  LEAVE; STag_database();pcdata = NULL; ENTER(S_database);
 }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 432 "scanner.l"
FAIL("`database' element cannot be empty.");
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 433 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of database element.", yytext[0]);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 434 "scanner.l"
FAIL("Bad attribute `%s' in `database' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_database):
#line 435 "scanner.l"
FAIL("EOF in attribute list of `database' element.");
	YY_BREAK


case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 439 "scanner.l"
{
  LEAVE;
  ETag_database();
  switch (YY_START) {
   case ROOT_database: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 446 "scanner.l"
FAIL("Unexpected end-tag `%s': `</database>' expected.",yytext);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 447 "scanner.l"
FAIL("Unexpected character `%c': `</database>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_database_2):
case YY_STATE_EOF(E_database):
#line 448 "scanner.l"
{
yypop_buffer_state();
if (!posStack.empty()) {xml::Position p = *posStack.begin(); yylineno = p.line; currentFile = p.file; posStack.pop_front(); } 
if (!YY_CURRENT_BUFFER) FAIL("Premature EOF: `</database>' expected.");}
	YY_BREAK

/* <!-- persistent object -->  */
/*           temporary (true|false) 'false'
  *           name ID #REQUIRED
  *           inherits NMTOKEN #IMPLIED>  */
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 460 "scanner.l"
{
  A_object_temporary = A_object_temporary_false;
  A_object_name = NULL;
  A_object_inherits = NULL;
  ENTER(AL_object);
  }
	YY_BREAK

case 45:
/* rule 45 can match eol */
#line 469 "scanner.l"
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 469 "scanner.l"
A_object_temporary = A_object_temporary_true;
	YY_BREAK
case 47:
/* rule 47 can match eol */
#line 471 "scanner.l"
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 471 "scanner.l"
A_object_temporary = A_object_temporary_false;
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 473 "scanner.l"
BUFFERLITERAL('\'',A_object_name);
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 474 "scanner.l"
BUFFERLITERAL('"',A_object_name);
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 476 "scanner.l"
BUFFERLITERAL('\'',A_object_inherits);
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 477 "scanner.l"
BUFFERLITERAL('"',A_object_inherits);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 479 "scanner.l"
{
  if (!A_object_name) FAIL("Required attribute `name' not set for `object' element.");
  LEAVE; STag_object();pcdata = NULL; ENTER(S_object);
 }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 483 "scanner.l"
{
  if (!A_object_name) FAIL("Required attribute `name' not set for `object' element.");
  LEAVE; STag_object(); pcdata = NULL; ETag_object();
  switch (YY_START) {
   case S_database_1: case S_database: case S_database_2: SET(S_database_2); break;
   case ROOT_object: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 491 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of object element.", yytext[0]);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 492 "scanner.l"
FAIL("Bad attribute `%s' in `object' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_object):
#line 493 "scanner.l"
FAIL("EOF in attribute list of `object' element.");
	YY_BREAK


case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 497 "scanner.l"
{
  LEAVE;
  ETag_object();
  switch (YY_START) {
   case S_database_1: case S_database: case S_database_2: SET(S_database_2); break;
   case ROOT_object: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 505 "scanner.l"
FAIL("Unexpected end-tag `%s': `</object>' expected.",yytext);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 506 "scanner.l"
FAIL("Unexpected character `%c': `</object>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_object):
case YY_STATE_EOF(S_object):
case YY_STATE_EOF(S_object_2):
#line 507 "scanner.l"
FAIL("Premature EOF: `</object>' expected.");
	YY_BREAK

/* <!-- Custom data type -->  */
/*           name NMTOKEN #REQUIRED
  *           class CDATA #REQUIRED
  *           sqltype CDATA #REQUIRED>  */
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 516 "scanner.l"
{
  A_type_name = NULL;
  A_type_class = NULL;
  A_type_sqltype = NULL;
  ENTER(AL_type);
  }
	YY_BREAK

case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 524 "scanner.l"
BUFFERLITERAL('\'',A_type_name);
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 525 "scanner.l"
BUFFERLITERAL('"',A_type_name);
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 527 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_type_class);
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 528 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_type_class);
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 530 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_type_sqltype);
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 531 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_type_sqltype);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 533 "scanner.l"
{
  if (!A_type_name) FAIL("Required attribute `name' not set for `type' element.");
  if (!A_type_class) FAIL("Required attribute `class' not set for `type' element.");
  if (!A_type_sqltype) FAIL("Required attribute `sqltype' not set for `type' element.");
  LEAVE; STag_type();pcdata = NULL; ENTER(S_type);
 }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 539 "scanner.l"
{
  if (!A_type_name) FAIL("Required attribute `name' not set for `type' element.");
  if (!A_type_class) FAIL("Required attribute `class' not set for `type' element.");
  if (!A_type_sqltype) FAIL("Required attribute `sqltype' not set for `type' element.");
  LEAVE; STag_type(); pcdata = NULL; ETag_type();
  switch (YY_START) {
   case S_if_d_target: case S_if_d_target_2: case S_if_d_target_1: SET(S_if_d_target_2); break;
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_type: SET(EPILOG); break;
   case S_if_d_backend_1: case S_if_d_backend_2: case S_if_d_backend: SET(S_if_d_backend_2); break;
  }
 }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 551 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of type element.", yytext[0]);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 552 "scanner.l"
FAIL("Bad attribute `%s' in `type' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_type):
#line 553 "scanner.l"
FAIL("EOF in attribute list of `type' element.");
	YY_BREAK


case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 557 "scanner.l"
{
  LEAVE;
  ETag_type();
  switch (YY_START) {
   case S_if_d_target: case S_if_d_target_2: case S_if_d_target_1: SET(S_if_d_target_2); break;
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_type: SET(EPILOG); break;
   case S_if_d_backend_1: case S_if_d_backend_2: case S_if_d_backend: SET(S_if_d_backend_2); break;
  }
 }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 567 "scanner.l"
FAIL("Unexpected end-tag `%s': `</type>' expected.",yytext);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 568 "scanner.l"
FAIL("Unexpected character `%c': `</type>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_type_2):
case YY_STATE_EOF(S_type):
case YY_STATE_EOF(E_type):
#line 569 "scanner.l"
FAIL("Premature EOF: `</type>' expected.");
	YY_BREAK

/* <!-- Include another litesql definition -->  */
/*           file CDATA #REQUIRED>  */
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 576 "scanner.l"
{
  A_include_file = NULL;
  ENTER(AL_include);
  }
	YY_BREAK

case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 582 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_include_file);
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 583 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_include_file);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 585 "scanner.l"
{
  if (!A_include_file) FAIL("Required attribute `file' not set for `include' element.");
  LEAVE; STag_include();pcdata = NULL; ENTER(E_include);
 }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 589 "scanner.l"
{
  if (!A_include_file) FAIL("Required attribute `file' not set for `include' element.");
  LEAVE; STag_include(); pcdata = NULL; ETag_include();
  switch (YY_START) {
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_include: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 597 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of include element.", yytext[0]);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 598 "scanner.l"
FAIL("Bad attribute `%s' in `include' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_include):
#line 599 "scanner.l"
FAIL("EOF in attribute list of `include' element.");
	YY_BREAK


case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 603 "scanner.l"
{
  LEAVE;
  ETag_include();
  switch (YY_START) {
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_include: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 611 "scanner.l"
FAIL("Unexpected end-tag `%s': `</include>' expected.",yytext);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 612 "scanner.l"
FAIL("Unexpected character `%c': `</include>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_include):
#line 613 "scanner.l"
FAIL("Premature EOF: `</include>' expected.");
	YY_BREAK

/* <!-- backend specific options and types -->  */
/*           name CDATA #IMPLIED>  */
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 620 "scanner.l"
{
  A_if_d_backend_name = NULL;
  ENTER(AL_if_d_backend);
  }
	YY_BREAK

case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 626 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_if_d_backend_name);
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 627 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_if_d_backend_name);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 629 "scanner.l"
{
  LEAVE; STag_if_d_backend();pcdata = NULL; ENTER(S_if_d_backend);
 }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 632 "scanner.l"
{
  LEAVE; STag_if_d_backend(); pcdata = NULL; ETag_if_d_backend();
  switch (YY_START) {
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_if_d_backend: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 641 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of if-backend element.", yytext[0]);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 642 "scanner.l"
FAIL("Bad attribute `%s' in `if-backend' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_if_d_backend):
#line 643 "scanner.l"
FAIL("EOF in attribute list of `if-backend' element.");
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 647 "scanner.l"
{
  LEAVE;
  ETag_if_d_backend();
  switch (YY_START) {
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_if_d_backend: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 657 "scanner.l"
FAIL("Unexpected end-tag `%s': `</if-backend>' expected.",yytext);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 658 "scanner.l"
FAIL("Unexpected character `%c': `</if-backend>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_if_d_backend):
case YY_STATE_EOF(S_if_d_backend_2):
case YY_STATE_EOF(S_if_d_backend):
#line 659 "scanner.l"
FAIL("Premature EOF: `</if-backend>' expected.");
	YY_BREAK

/* <!-- target specific options and types -->  */
/*           name CDATA #IMPLIED>  */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 666 "scanner.l"
{
  A_if_d_target_name = NULL;
  ENTER(AL_if_d_target);
  }
	YY_BREAK

case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 672 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_if_d_target_name);
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 673 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_if_d_target_name);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 675 "scanner.l"
{
  LEAVE; STag_if_d_target();pcdata = NULL; ENTER(S_if_d_target);
 }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 678 "scanner.l"
{
  LEAVE; STag_if_d_target(); pcdata = NULL; ETag_if_d_target();
  switch (YY_START) {
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_if_d_target: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 685 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of if-target element.", yytext[0]);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 686 "scanner.l"
FAIL("Bad attribute `%s' in `if-target' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_if_d_target):
#line 687 "scanner.l"
FAIL("EOF in attribute list of `if-target' element.");
	YY_BREAK


case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 691 "scanner.l"
{
  LEAVE;
  ETag_if_d_target();
  switch (YY_START) {
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_if_d_target: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 699 "scanner.l"
FAIL("Unexpected end-tag `%s': `</if-target>' expected.",yytext);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 700 "scanner.l"
FAIL("Unexpected character `%c': `</if-target>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_if_d_target_2):
case YY_STATE_EOF(S_if_d_target):
case YY_STATE_EOF(E_if_d_target):
#line 701 "scanner.l"
FAIL("Premature EOF: `</if-target>' expected.");
	YY_BREAK

/*           name CDATA #REQUIRED
  *           value CDATA #REQUIRED>  */
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 707 "scanner.l"
{
  A_option_name = NULL;
  A_option_value = NULL;
  ENTER(AL_option);
  }
	YY_BREAK

case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 714 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_option_name);
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 715 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_option_name);
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 717 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_option_value);
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 718 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_option_value);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 720 "scanner.l"
{
  if (!A_option_name) FAIL("Required attribute `name' not set for `option' element.");
  if (!A_option_value) FAIL("Required attribute `value' not set for `option' element.");
  LEAVE; STag_option();pcdata = NULL; ENTER(E_option);
 }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 725 "scanner.l"
{
  if (!A_option_name) FAIL("Required attribute `name' not set for `option' element.");
  if (!A_option_value) FAIL("Required attribute `value' not set for `option' element.");
  LEAVE; STag_option(); pcdata = NULL; ETag_option();
  switch (YY_START) {
   case S_if_d_target: case S_if_d_target_2: case S_if_d_target_1: SET(S_if_d_target_2); break;
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_option: SET(EPILOG); break;
   case S_if_d_backend_1: case S_if_d_backend_2: case S_if_d_backend: SET(S_if_d_backend_2); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 738 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of option element.", yytext[0]);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 739 "scanner.l"
FAIL("Bad attribute `%s' in `option' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_option):
#line 740 "scanner.l"
FAIL("EOF in attribute list of `option' element.");
	YY_BREAK


case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 744 "scanner.l"
{
  LEAVE;
  ETag_option();
  switch (YY_START) {
   case S_if_d_target: case S_if_d_target_2: case S_if_d_target_1: SET(S_if_d_target_2); break;
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_option: SET(EPILOG); break;
   case S_if_d_backend_1: case S_if_d_backend_2: case S_if_d_backend: SET(S_if_d_backend_2); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 756 "scanner.l"
FAIL("Unexpected end-tag `%s': `</option>' expected.",yytext);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 757 "scanner.l"
FAIL("Unexpected character `%c': `</option>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_option):
#line 758 "scanner.l"
FAIL("Premature EOF: `</option>' expected.");
	YY_BREAK

/*           name NMTOKEN #REQUIRED
  *           type NMTOKEN #REQUIRED
  *           default CDATA #IMPLIED
  *           indexed (true|false) "false"
  *           unique (true|false) "false">  */
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 767 "scanner.l"
{
  A_field_name = NULL;
  A_field_type = NULL;
  A_field_default = NULL;
  A_field_indexed = A_field_indexed_false;
  A_field_unique = A_field_unique_false;
  ENTER(AL_field);
  }
	YY_BREAK

case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 777 "scanner.l"
BUFFERLITERAL('\'',A_field_name);
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 778 "scanner.l"
BUFFERLITERAL('"',A_field_name);
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 780 "scanner.l"
BUFFERLITERAL('\'',A_field_type);
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 781 "scanner.l"
BUFFERLITERAL('"',A_field_type);
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 783 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_field_default);
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 784 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_field_default);
	YY_BREAK
case 123:
/* rule 123 can match eol */
#line 787 "scanner.l"
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 787 "scanner.l"
A_field_indexed = A_field_indexed_true;
	YY_BREAK
case 125:
/* rule 125 can match eol */
#line 789 "scanner.l"
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 789 "scanner.l"
A_field_indexed = A_field_indexed_false;
	YY_BREAK
case 127:
/* rule 127 can match eol */
#line 792 "scanner.l"
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 792 "scanner.l"
A_field_unique = A_field_unique_true;
	YY_BREAK
case 129:
/* rule 129 can match eol */
#line 794 "scanner.l"
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 794 "scanner.l"
A_field_unique = A_field_unique_false;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 796 "scanner.l"
{
  if (!A_field_name) FAIL("Required attribute `name' not set for `field' element.");
  if (!A_field_type) FAIL("Required attribute `type' not set for `field' element.");
  LEAVE; STag_field();pcdata = NULL; ENTER(S_field);
 }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 801 "scanner.l"
{
  if (!A_field_name) FAIL("Required attribute `name' not set for `field' element.");
  if (!A_field_type) FAIL("Required attribute `type' not set for `field' element.");
  LEAVE; STag_field(); pcdata = NULL; ETag_field();
  switch (YY_START) {
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case ROOT_field: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 811 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of field element.", yytext[0]);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 812 "scanner.l"
FAIL("Bad attribute `%s' in `field' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_field):
#line 813 "scanner.l"
FAIL("EOF in attribute list of `field' element.");
	YY_BREAK


case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 817 "scanner.l"
{
  LEAVE;
  ETag_field();
  switch (YY_START) {
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case ROOT_field: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 826 "scanner.l"
FAIL("Unexpected end-tag `%s': `</field>' expected.",yytext);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 827 "scanner.l"
FAIL("Unexpected character `%c': `</field>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_field):
case YY_STATE_EOF(S_field_2):
case YY_STATE_EOF(S_field):
#line 828 "scanner.l"
FAIL("Premature EOF: `</field>' expected.");
	YY_BREAK

/*           unique (true|false) "false">  */
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 833 "scanner.l"
{
  A_index_unique = A_index_unique_false;
  ENTER(AL_index);
  }
	YY_BREAK

case 139:
/* rule 139 can match eol */
#line 840 "scanner.l"
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 840 "scanner.l"
A_index_unique = A_index_unique_true;
	YY_BREAK
case 141:
/* rule 141 can match eol */
#line 842 "scanner.l"
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 842 "scanner.l"
A_index_unique = A_index_unique_false;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 844 "scanner.l"
{
  LEAVE; STag_index();pcdata = NULL; ENTER(S_index);
 }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 847 "scanner.l"
FAIL("`index' element cannot be empty.");
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 848 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of index element.", yytext[0]);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 849 "scanner.l"
FAIL("Bad attribute `%s' in `index' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_index):
#line 850 "scanner.l"
FAIL("EOF in attribute list of `index' element.");
	YY_BREAK


case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 854 "scanner.l"
{
  LEAVE;
  ETag_index();
  switch (YY_START) {
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case ROOT_index: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 863 "scanner.l"
FAIL("Unexpected end-tag `%s': `</index>' expected.",yytext);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 864 "scanner.l"
FAIL("Unexpected character `%c': `</index>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_index_3):
case YY_STATE_EOF(E_index):
#line 865 "scanner.l"
FAIL("Premature EOF: `</index>' expected.");
	YY_BREAK

/*           name NMTOKEN #REQUIRED>  */
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 870 "scanner.l"
{
  A_indexfield_name = NULL;
  ENTER(AL_indexfield);
  }
	YY_BREAK

case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 876 "scanner.l"
BUFFERLITERAL('\'',A_indexfield_name);
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 877 "scanner.l"
BUFFERLITERAL('"',A_indexfield_name);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 879 "scanner.l"
{
  if (!A_indexfield_name) FAIL("Required attribute `name' not set for `indexfield' element.");
  LEAVE; STag_indexfield();pcdata = NULL; ENTER(E_indexfield);
 }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 883 "scanner.l"
{
  if (!A_indexfield_name) FAIL("Required attribute `name' not set for `indexfield' element.");
  LEAVE; STag_indexfield(); pcdata = NULL; ETag_indexfield();
  switch (YY_START) {
   case S_index_3: case S_index_2: case S_index_1: SET(S_index_3); break;
   case ROOT_indexfield: SET(EPILOG); break;
   case S_index: SET(S_index_1); break;
  }
 }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 892 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of indexfield element.", yytext[0]);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 893 "scanner.l"
FAIL("Bad attribute `%s' in `indexfield' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_indexfield):
#line 894 "scanner.l"
FAIL("EOF in attribute list of `indexfield' element.");
	YY_BREAK


case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 898 "scanner.l"
{
  LEAVE;
  ETag_indexfield();
  switch (YY_START) {
   case S_index_3: case S_index_2: case S_index_1: SET(S_index_3); break;
   case ROOT_indexfield: SET(EPILOG); break;
   case S_index: SET(S_index_1); break;
  }
 }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 907 "scanner.l"
FAIL("Unexpected end-tag `%s': `</indexfield>' expected.",yytext);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 908 "scanner.l"
FAIL("Unexpected character `%c': `</indexfield>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_indexfield):
#line 909 "scanner.l"
FAIL("Premature EOF: `</indexfield>' expected.");
	YY_BREAK

/*           name NMTOKEN #REQUIRED
  *           value CDATA #REQUIRED>  */
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 915 "scanner.l"
{
  A_value_name = NULL;
  A_value_value = NULL;
  ENTER(AL_value);
  }
	YY_BREAK

case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 922 "scanner.l"
BUFFERLITERAL('\'',A_value_name);
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 923 "scanner.l"
BUFFERLITERAL('"',A_value_name);
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 925 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_value_value);
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 926 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_value_value);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 928 "scanner.l"
{
  if (!A_value_name) FAIL("Required attribute `name' not set for `value' element.");
  if (!A_value_value) FAIL("Required attribute `value' not set for `value' element.");
  LEAVE; STag_value();pcdata = NULL; ENTER(E_value);
 }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 933 "scanner.l"
{
  if (!A_value_name) FAIL("Required attribute `name' not set for `value' element.");
  if (!A_value_value) FAIL("Required attribute `value' not set for `value' element.");
  LEAVE; STag_value(); pcdata = NULL; ETag_value();
  switch (YY_START) {
   case S_type_2: case S_type: case S_type_1: SET(S_type_2); break;
   case S_field_2: case S_field_1: case S_field: SET(S_field_2); break;
   case ROOT_value: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 943 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of value element.", yytext[0]);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 944 "scanner.l"
FAIL("Bad attribute `%s' in `value' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_value):
#line 945 "scanner.l"
FAIL("EOF in attribute list of `value' element.");
	YY_BREAK


case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 949 "scanner.l"
{
  LEAVE;
  ETag_value();
  switch (YY_START) {
   case S_type_2: case S_type: case S_type_1: SET(S_type_2); break;
   case S_field_2: case S_field_1: case S_field: SET(S_field_2); break;
   case ROOT_value: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 958 "scanner.l"
FAIL("Unexpected end-tag `%s': `</value>' expected.",yytext);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 959 "scanner.l"
FAIL("Unexpected character `%c': `</value>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_value):
#line 960 "scanner.l"
FAIL("Premature EOF: `</value>' expected.");
	YY_BREAK

/*           name NMTOKEN #REQUIRED
  *           const (true|false) "false"
  *           returntype CDATA 'void'>  */
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 967 "scanner.l"
{
  A_method_name = NULL;
  A_method_const = A_method_const_false;
  A_method_returntype = "void";
  ENTER(AL_method);
  }
	YY_BREAK

case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 975 "scanner.l"
BUFFERLITERAL('\'',A_method_name);
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 976 "scanner.l"
BUFFERLITERAL('"',A_method_name);
	YY_BREAK
case 175:
/* rule 175 can match eol */
#line 979 "scanner.l"
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 979 "scanner.l"
A_method_const = A_method_const_true;
	YY_BREAK
case 177:
/* rule 177 can match eol */
#line 981 "scanner.l"
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 981 "scanner.l"
A_method_const = A_method_const_false;
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 983 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_method_returntype);
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 984 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_method_returntype);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 986 "scanner.l"
{
  if (!A_method_name) FAIL("Required attribute `name' not set for `method' element.");
  LEAVE; STag_method();pcdata = NULL; ENTER(S_method);
 }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 990 "scanner.l"
{
  if (!A_method_name) FAIL("Required attribute `name' not set for `method' element.");
  LEAVE; STag_method(); pcdata = NULL; ETag_method();
  switch (YY_START) {
   case ROOT_method: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 998 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of method element.", yytext[0]);
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 999 "scanner.l"
FAIL("Bad attribute `%s' in `method' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_method):
#line 1000 "scanner.l"
FAIL("EOF in attribute list of `method' element.");
	YY_BREAK


case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 1004 "scanner.l"
{
  LEAVE;
  ETag_method();
  switch (YY_START) {
   case ROOT_method: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 1012 "scanner.l"
FAIL("Unexpected end-tag `%s': `</method>' expected.",yytext);
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1013 "scanner.l"
FAIL("Unexpected character `%c': `</method>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_method):
case YY_STATE_EOF(S_method_2):
case YY_STATE_EOF(S_method):
#line 1014 "scanner.l"
FAIL("Premature EOF: `</method>' expected.");
	YY_BREAK

/*           name NMTOKEN #REQUIRED
  *           type CDATA #REQUIRED>  */
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 1020 "scanner.l"
{
  A_param_name = NULL;
  A_param_type = NULL;
  ENTER(AL_param);
  }
	YY_BREAK

case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 1027 "scanner.l"
BUFFERLITERAL('\'',A_param_name);
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 1028 "scanner.l"
BUFFERLITERAL('"',A_param_name);
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 1030 "scanner.l"
ENTER(VALUE1); BUFFERSET(A_param_type);
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 1031 "scanner.l"
ENTER(VALUE2); BUFFERSET(A_param_type);
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1033 "scanner.l"
{
  if (!A_param_name) FAIL("Required attribute `name' not set for `param' element.");
  if (!A_param_type) FAIL("Required attribute `type' not set for `param' element.");
  LEAVE; STag_param();pcdata = NULL; ENTER(E_param);
 }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1038 "scanner.l"
{
  if (!A_param_name) FAIL("Required attribute `name' not set for `param' element.");
  if (!A_param_type) FAIL("Required attribute `type' not set for `param' element.");
  LEAVE; STag_param(); pcdata = NULL; ETag_param();
  switch (YY_START) {
   case S_method_2: case S_method_1: case S_method: SET(S_method_2); break;
   case ROOT_param: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1047 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of param element.", yytext[0]);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1048 "scanner.l"
FAIL("Bad attribute `%s' in `param' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_param):
#line 1049 "scanner.l"
FAIL("EOF in attribute list of `param' element.");
	YY_BREAK


case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 1053 "scanner.l"
{
  LEAVE;
  ETag_param();
  switch (YY_START) {
   case S_method_2: case S_method_1: case S_method: SET(S_method_2); break;
   case ROOT_param: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 1061 "scanner.l"
FAIL("Unexpected end-tag `%s': `</param>' expected.",yytext);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1062 "scanner.l"
FAIL("Unexpected character `%c': `</param>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_param):
#line 1063 "scanner.l"
FAIL("Premature EOF: `</param>' expected.");
	YY_BREAK

/*           name NMTOKEN #IMPLIED
  *           id NMTOKEN #IMPLIED
  *           unidir (true|false) "false">  */
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 1070 "scanner.l"
{
  A_relation_name = NULL;
  A_relation_id = NULL;
  A_relation_unidir = A_relation_unidir_false;
  ENTER(AL_relation);
  }
	YY_BREAK

case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 1078 "scanner.l"
BUFFERLITERAL('\'',A_relation_name);
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 1079 "scanner.l"
BUFFERLITERAL('"',A_relation_name);
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1081 "scanner.l"
BUFFERLITERAL('\'',A_relation_id);
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 1082 "scanner.l"
BUFFERLITERAL('"',A_relation_id);
	YY_BREAK
case 205:
/* rule 205 can match eol */
#line 1085 "scanner.l"
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 1085 "scanner.l"
A_relation_unidir = A_relation_unidir_true;
	YY_BREAK
case 207:
/* rule 207 can match eol */
#line 1087 "scanner.l"
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 1087 "scanner.l"
A_relation_unidir = A_relation_unidir_false;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1089 "scanner.l"
{
  LEAVE; STag_relation();pcdata = NULL; ENTER(S_relation);
 }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1092 "scanner.l"
{
  LEAVE; STag_relation(); pcdata = NULL; ETag_relation();
  switch (YY_START) {
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_relation: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1099 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of relation element.", yytext[0]);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1100 "scanner.l"
FAIL("Bad attribute `%s' in `relation' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_relation):
#line 1101 "scanner.l"
FAIL("EOF in attribute list of `relation' element.");
	YY_BREAK


case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
#line 1105 "scanner.l"
{
  LEAVE;
  ETag_relation();
  switch (YY_START) {
   case S_database_1: case S_database_2: case S_database: SET(S_database_2); break;
   case ROOT_relation: SET(EPILOG); break;
  }
 }
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 1113 "scanner.l"
FAIL("Unexpected end-tag `%s': `</relation>' expected.",yytext);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 1114 "scanner.l"
FAIL("Unexpected character `%c': `</relation>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(S_relation_2):
case YY_STATE_EOF(E_relation):
case YY_STATE_EOF(S_relation):
#line 1115 "scanner.l"
FAIL("Premature EOF: `</relation>' expected.");
	YY_BREAK

/*           unique (true|false) "false"
  *           limit (one|many) "many"
  *           owner (true|false) "false"
  *           object IDREF #REQUIRED
  *           handle NMTOKEN #IMPLIED
  *           remotehandle NMTOKEN #IMPLIED>  */
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 1125 "scanner.l"
{
  A_relate_unique = A_relate_unique_false;
  A_relate_limit = A_relate_limit_many;
  A_relate_owner = A_relate_owner_false;
  A_relate_object = NULL;
  A_relate_handle = NULL;
  A_relate_remotehandle = NULL;
  ENTER(AL_relate);
  }
	YY_BREAK

case 217:
/* rule 217 can match eol */
#line 1137 "scanner.l"
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 1137 "scanner.l"
A_relate_unique = A_relate_unique_true;
	YY_BREAK
case 219:
/* rule 219 can match eol */
#line 1139 "scanner.l"
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 1139 "scanner.l"
A_relate_unique = A_relate_unique_false;
	YY_BREAK
case 221:
/* rule 221 can match eol */
#line 1142 "scanner.l"
case 222:
/* rule 222 can match eol */
YY_RULE_SETUP
#line 1142 "scanner.l"
A_relate_limit = A_relate_limit_one;
	YY_BREAK
case 223:
/* rule 223 can match eol */
#line 1144 "scanner.l"
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 1144 "scanner.l"
A_relate_limit = A_relate_limit_many;
	YY_BREAK
case 225:
/* rule 225 can match eol */
#line 1147 "scanner.l"
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 1147 "scanner.l"
A_relate_owner = A_relate_owner_true;
	YY_BREAK
case 227:
/* rule 227 can match eol */
#line 1149 "scanner.l"
case 228:
/* rule 228 can match eol */
YY_RULE_SETUP
#line 1149 "scanner.l"
A_relate_owner = A_relate_owner_false;
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 1151 "scanner.l"
BUFFERLITERAL('\'',A_relate_object);
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 1152 "scanner.l"
BUFFERLITERAL('"',A_relate_object);
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 1154 "scanner.l"
BUFFERLITERAL('\'',A_relate_handle);
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 1155 "scanner.l"
BUFFERLITERAL('"',A_relate_handle);
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 1157 "scanner.l"
BUFFERLITERAL('\'',A_relate_remotehandle);
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 1158 "scanner.l"
BUFFERLITERAL('"',A_relate_remotehandle);
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 1160 "scanner.l"
{
  if (!A_relate_object) FAIL("Required attribute `object' not set for `relate' element.");
  LEAVE; STag_relate();pcdata = NULL; ENTER(E_relate);
 }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 1164 "scanner.l"
{
  if (!A_relate_object) FAIL("Required attribute `object' not set for `relate' element.");
  LEAVE; STag_relate(); pcdata = NULL; ETag_relate();
  switch (YY_START) {
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case ROOT_relate: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 1173 "scanner.l"
FAIL("Unexpected character `%c' in attribute list of relate element.", yytext[0]);
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 1174 "scanner.l"
FAIL("Bad attribute `%s' in `relate' element start tag.",yytext);
	YY_BREAK
case YY_STATE_EOF(AL_relate):
#line 1175 "scanner.l"
FAIL("EOF in attribute list of `relate' element.");
	YY_BREAK


case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 1179 "scanner.l"
{
  LEAVE;
  ETag_relate();
  switch (YY_START) {
   case S_relation_1: case S_relation_2: case S_relation: SET(S_relation_2); break;
   case ROOT_relate: SET(EPILOG); break;
   case S_object_1: case S_object: case S_object_2: SET(S_object_2); break;
  }
 }
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 1188 "scanner.l"
FAIL("Unexpected end-tag `%s': `</relate>' expected.",yytext);
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 1189 "scanner.l"
FAIL("Unexpected character `%c': `</relate>' expected.",yytext[0]);
	YY_BREAK
case YY_STATE_EOF(E_relate):
#line 1190 "scanner.l"
FAIL("Premature EOF: `</relate>' expected.");
	YY_BREAK

/* EPILOG: after the root element. */

case 242:
YY_RULE_SETUP
#line 1196 "scanner.l"
{SET(PROLOG); yyless(0); CLEANUP; return -1;}
	YY_BREAK
case YY_STATE_EOF(EPILOG):
#line 1197 "scanner.l"
{ if (posStack.empty()) { SUCCEED; } else FAIL("Premature </database>."); };
	YY_BREAK

/* CHARACTER DATA. */

/* Non-defined standard entities... */
case 243:
YY_RULE_SETUP
#line 1204 "scanner.l"
BUFFERPUTC('&');
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 1205 "scanner.l"
BUFFERPUTC('<');
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 1206 "scanner.l"
BUFFERPUTC('>');
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 1207 "scanner.l"
BUFFERPUTC('\'');
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 1208 "scanner.l"
BUFFERPUTC('"');
	YY_BREAK
/* Character entities. */
case 248:
YY_RULE_SETUP
#line 1211 "scanner.l"
BUFFERPUTC((unsigned char)atoi(yytext+2));
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 1212 "scanner.l"
BUFFERPUTC((unsigned char)strtol(yytext+3,NULL,16));
	YY_BREAK


case 250:
/* rule 250 can match eol */
#line 1217 "scanner.l"
case 251:
/* rule 251 can match eol */
#line 1218 "scanner.l"
case 252:
/* rule 252 can match eol */
#line 1219 "scanner.l"
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 1219 "scanner.l"
BUFFERPUTC('\n');
	YY_BREAK


case 254:
YY_RULE_SETUP
#line 1223 "scanner.l"
ENTER(CDATA);
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 1224 "scanner.l"
FAIL("Unexpected `]""]>' in character data.");
	YY_BREAK


case 256:
YY_RULE_SETUP
#line 1228 "scanner.l"
BUFFERDONE; LEAVE;
	YY_BREAK
case YY_STATE_EOF(VALUE1):
#line 1229 "scanner.l"
FAIL("EOF in literal (\"'\" expected).");
	YY_BREAK


case 257:
YY_RULE_SETUP
#line 1233 "scanner.l"
BUFFERDONE; LEAVE;
	YY_BREAK
case YY_STATE_EOF(VALUE2):
#line 1234 "scanner.l"
FAIL("EOF in literal (`\"' expected).");
	YY_BREAK


case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 1238 "scanner.l"
BUFFERPUTC(yytext[0]);
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 1239 "scanner.l"
FAIL("Spurious `%c' in character data.",yytext[0]);
	YY_BREAK


case 260:
YY_RULE_SETUP
#line 1243 "scanner.l"
LEAVE;
	YY_BREAK
/* "]""]"		BUFFERPUTC(yytext[0]); BUFFERPUTC(yytext[1]); */
case 261:
YY_RULE_SETUP
#line 1245 "scanner.l"
BUFFERPUTC(yytext[0]);
	YY_BREAK
case YY_STATE_EOF(CDATA):
#line 1246 "scanner.l"
FAIL("EOF in CDATA section.");
	YY_BREAK

/* Impossible rules to avoid warnings from flex(1). */
/* Ideally, this should be replaced by code in flexml.pl that
    generates just the states not covered by other rules. */

case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 1253 "scanner.l"
FAIL("Syntax error on character `%c'.", yytext[0]);
	YY_BREAK

case 263:
YY_RULE_SETUP
#line 1256 "scanner.l"
ECHO;
	YY_BREAK
#line 5337 "scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ROOT_database):
case YY_STATE_EOF(S_database):
case YY_STATE_EOF(S_database_1):
case YY_STATE_EOF(ROOT_object):
case YY_STATE_EOF(S_object_1):
case YY_STATE_EOF(ROOT_type):
case YY_STATE_EOF(S_type_1):
case YY_STATE_EOF(ROOT_include):
case YY_STATE_EOF(ROOT_if_d_backend):
case YY_STATE_EOF(S_if_d_backend_1):
case YY_STATE_EOF(ROOT_if_d_target):
case YY_STATE_EOF(S_if_d_target_1):
case YY_STATE_EOF(ROOT_option):
case YY_STATE_EOF(ROOT_field):
case YY_STATE_EOF(S_field_1):
case YY_STATE_EOF(ROOT_index):
case YY_STATE_EOF(S_index):
case YY_STATE_EOF(S_index_1):
case YY_STATE_EOF(S_index_2):
case YY_STATE_EOF(ROOT_indexfield):
case YY_STATE_EOF(ROOT_value):
case YY_STATE_EOF(ROOT_method):
case YY_STATE_EOF(S_method_1):
case YY_STATE_EOF(ROOT_param):
case YY_STATE_EOF(ROOT_relation):
case YY_STATE_EOF(S_relation_1):
case YY_STATE_EOF(ROOT_relate):
case YY_STATE_EOF(IMPOSSIBLE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2078 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2078 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2077);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1256 "scanner.l"



/* Element context stack lookup. */
int element_context(int i)
{
  return (0<i && i<yy_start_stack_depth
	  ? yy_start_stack[yy_start_stack_ptr - i]
	  : 0);
}

#ifdef FLEX_DEBUG
void print_yy_stack(char* fmt, ...)
{
  int i = 0; va_list ap; va_start(ap, fmt);
  vfprintf(stderr, fmt, ap);
  for (i=1; i<yy_start_stack_ptr; i++)
    fprintf(stderr, "%s/", statenames[yy_start_stack[i] ]);
  fprintf(stderr,"%s\n", statenames[YY_START]);
  va_end(ap);
}

static void debug_enter(int state, const char* statename) {
  yy_push_state(state);
  if (yy_flex_debug) print_yy_stack("--ENTER(%s) : ",statename);
}

static void debug_leave(void) {
  if (yy_flex_debug) print_yy_stack("--LEAVE : ");
  yy_pop_state();
}

static void debug_set(int state, const char* statename) {
  BEGIN(state);
  if (yy_flex_debug) print_yy_stack("--SET(%s) : ",statename);
}
#endif

enum {flexml_max_err_msg_size = 512};

static char flexml_err_msg[flexml_max_err_msg_size];
const char * parse_err_msg()
{
    return flexml_err_msg;
}

static void reset_parse_err_msg()
{
    flexml_err_msg[0] = '\0';
}


static void cleanup(void)
{
    if (statenames) {
        free(statenames);
	statenames = NULL;
    }
}


static int fail(const char* fmt, ...)
{
    int chars_left, used;
    va_list ap; va_start(ap, fmt);
#ifdef FLEXML_yylineno
    used = sprintf(flexml_err_msg,
		   "Invalid XML (XML input line %d, state %d, file \"%s\"): ",
		   yylineno, YY_START, currentFile.c_str());
#else
    used = sprintf(flexml_err_msg,
		   "Invalid XML (state %d, file \"%s\"): ",
		   YY_START, currentFile.c_str());
#endif
    chars_left = flexml_max_err_msg_size - used - 1;
    vsnprintf(flexml_err_msg + used, chars_left, fmt, ap);
    va_end(ap);

#ifndef FLEXML_quiet_parser
    /* print directly to sdterr */
    fprintf(stderr, "%s\n", flexml_err_msg);
    flexml_err_msg[0] = '\0';
#endif

    cleanup();

    return 1;
}

