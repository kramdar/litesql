<!-- litesql XML database definition syntax -->


<!-- Top level database information 

     Defines a collection of objects and relations in a database.
    

     name

        Name of the database.


     namespace

        All generated code is placed into a namespace to avoid
        name collisions with other sources.

     
     include

        The file to be included from the generated code, 
        in target-independent format, that is, no file extension. 
-->
<!ELEMENT database (object|relation|include|type|option)+>
<!ATTLIST database
          name ID #REQUIRED
          namespace NMTOKEN #REQUIRED
          include NMTOKEN #IMPLIED>
          
<!-- Persistent object (class of objects) 
    
     Defines a persistent object that can be stored in a database. 
     
     
     temporary
     
        if true, all the tables associated with the object
        are created (and flagged as temporary) when a database 
        connection is opened. When the connection is closed, the 
        tables are dropped. 
       

     name

        Name of the class of objects.


     inherits

        Defines an inheritance relationship between objects. The object that
        is being defined inherits all the fields, relations, interfaces and
        methods from the parent.
-->
<!ELEMENT object (field|method|index|option|implements|check)*>
<!ATTLIST object
          temporary (true|false) 'false'
          name ID #REQUIRED
          inherits NMTOKEN #IMPLIED>

<!-- Interface 

     Defines an interface of methods (and relations). 
     
     
     name
     
        Name of the interface.
-->
<!ELEMENT interface (method)*>
<!ATTLIST interface
          name ID #REQUIRED>

<!-- Interface implementation

     Indicates that the object implements an interface.
     The object will inherit methods and relations of the interface.


     interface
     
        Name of the interface.
-->
<!ELEMENT implements EMPTY>
<!ATTLIST implements
          interface NMTOKEN #REQUIRED>

<!-- Consistency check 

     An assertion which is verified upon specified triggers.
     It can be defined for data types, specific fields, relation operations
     and object-wide operations.

     If no triggers are specified for the consistency check,
     it is executed for every operation.

     onCreate

        If true, the check function is executed when the object is created.
        Can only be used with object-wide checks.

     
     onDelete

        If true, the check function is executed when the object is deleted.
        Can only be used with object-wise checks.


     onUpdate
        
        If true, the check function is executed when data is being updated.

     
     onLink

        If true, the check function is executed upon linkage.
        Can only be used with relation operations.


     onUnlink

        If true, the check function is executed upon unlinkage.
        Can only be used with relation operations.
    

     function

        Name of the check function.

     
     param

        Additional parameter supplied to the check function.
-->     
<!ELEMENT check EMPTY>
<!ATTLIST check
          onCreate (true|false) 'false'
          onDelete (true|false) 'false'
          onUpdate (true|false) 'false'
          onLink   (true|false) 'false'
          onUnlink (true|false) 'false'
          function NMTOKEN #REQUIRED
          param    CDATA   #IMPLIED>

<!-- Custom data type 

     Defines a data type and the means of representing and storing it. 
     
     
     name 
     
        Name of the data type.
-->          
<!ELEMENT type ((represent)*, (store)*, (value)*, (check)*)>
<!ATTLIST type
          name NMTOKEN #REQUIRED>

<!-- Custom data type representation 

     Defines how data type is represented in a target language. 
     
     
     as 
        
        Target language data type.

     
     target

        Target language name. If not specified, this representation of
        data is the default for all targets. 
-->
<!ELEMENT represent EMPTY>
<!ATTLIST represent
          as      CDATA   #REQUIRED
          target  NMTOKEN #IMPLIED>
         
<!-- Custom data type storage definition 

     Defines how data type is stored in a database
     
     
     as
        
        SQL data type.
        
     
     backend
     
        Database backend name. If not specified, data will be stored
        using this definition by default. 
-->
<!ELEMENT store EMPTY>
<!ATTLIST store
          as      CDATA   #REQUIRED
          backend NMTOKEN #IMPLIED>

<!-- Include another litesql definition 

     The file being included should not contain normal XML preludes
     <?xml ... ?>, only the tags that one wishes to replace the include
     tag with.


     file

        Name of the file to be included.
-->
<!ELEMENT include EMPTY>
<!ATTLIST include
          file CDATA #REQUIRED>

<!-- Backend (specific) option 

     This tag can be used to set backend specific options
     either globally or for a single table.
     
     
     name
     
        Name of the option.
        
      
     value
     
        Value of the option.
        
     
     backend
     
        Name of the backend.
-->
<!ELEMENT option EMPTY>
<!ATTLIST option
          name    CDATA #REQUIRED
          value   CDATA #REQUIRED
          backend NMTOKEN #IMPLIED>
          
<!-- Field definition 

     Defines a field that holds a single value of an object or a relation.
     
     
     name
        
        Name of the field.
        
     
     type
     
        Type of the field (litesql type name).
        
     
     default
     
        Default value of the field.  When used in a relation, the fields with
        default values must be placed last.
        

     indexed

        If true, the table is indexed by this field (an index is created).
        See index-tag for multi-field indices.


     unique
        
        If true, an uniqueness constraint is added to the table.    
-->          
<!ELEMENT field ((value)*,(check)*)>
<!ATTLIST field 
          name NMTOKEN #REQUIRED
          type NMTOKEN #REQUIRED
          default CDATA #IMPLIED
          indexed (true|false) "false"
          unique (true|false) "false">

<!-- Index definition 

     A multi-field index for a table of an object or a relation.
 

     unique

        If true, the combination of the fields' values is unique.
-->
<!ELEMENT index (indexfield, (indexfield)+)>
<!ATTLIST index 
          unique (true|false) "false">

<!-- Indexed field 

     A field that is included in an index.
     
     
     name
        
        Name of the field.
-->
<!ELEMENT indexfield EMPTY>
<!ATTLIST indexfield
          name NMTOKEN #REQUIRED>
          
<!-- Enumerated value 

     name

        Name of the enumerated value.


     value

        Value of the enumerated value in target-independent string format.
-->          
<!ELEMENT value EMPTY>
<!ATTLIST value
          name NMTOKEN #REQUIRED
          value CDATA #REQUIRED>


<!-- Method of object or interface 

     name
        
        Name of the method.


     const

        If true, indicates that method cannot change object's data.

     
     returnType

        Type of the return value, can correspond to litesql's type names
        or target language type names.
-->
<!ELEMENT method (param)*>
<!ATTLIST method 
          name NMTOKEN #REQUIRED
          const (true|false) "false"
          returnType CDATA #IMPLIED>

<!-- Parameter of method 

     Indicates that method requires a parameter.

    
     name
     
        Name of the parameter.


     type

        Type of the parameter, can correspond to litesql's type names
        or target language type names.

-->
<!ELEMENT param EMPTY>
<!ATTLIST param
          name NMTOKEN #REQUIRED
          type CDATA #REQUIRED>

<!-- Relation between objects 

     Specifies a relation between objects. 

     Many-to-many relations and n-ary relations are implemented
     by storing links into a separate relation table.
     
     One-to-many and one-to-one relations are stored into object's table.

     Additional data can be added to the relation by using field-tags.
     
     Local options (applied only to relation's table if it has one)
     can be specified by using option-tags.
    
    name

        Relation can be referenced by this name after code generation.
        If no name is specified, it will be computed by concatenating
        the alphabetically ordered list of the objects' 
        (or interfaces') names and the id string of the relation.

    
    id

        Id string is used to differentiate relations with
        exactly same contents (same objects and interfaces).
        Id is appended to the name of the table.
   
-->
<!ELEMENT relation (relate|field|index|option)*>
<!ATTLIST relation
          name NMTOKEN #IMPLIED
          id NMTOKEN #IMPLIED>

<!-- Participation in relation 

     Specifies an interface or a class which participates in relation.


     unique
        
         If true, there can be only one link to related object.


     limit
        
         Similar to unique, only applicable to binary relations.
         If set to 'one', sets an uniqueness constraint to the other object.


     object

         The object that participates in the relation.

     
     interface

         Objects that implement the interface will participate in the
         relation. Only one interface may be included in a relation.


     handle

         Defines "a handle" for the relation. The handle represents
         a view to the relation from a single object's point of view.
         Can not be used if an interface is included in the relation
         because the handle would possibly point to multiple types
         of objects. 
-->
<!ELEMENT relate EMPTY>
<!ATTLIST relate
          unique (true|false) "false"
          limit (one|many) "many"
          object IDREF #IMPLIED
          interface IDREF #IMPLIED
          handle NMTOKEN #IMPLIED>
